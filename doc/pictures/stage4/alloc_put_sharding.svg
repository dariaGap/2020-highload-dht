<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="357"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="357"> </text>
<g id="frames">
<g>
<title>all (17,859 samples, 100.00%)</title><rect x="10.0" y="323.0" width="1180.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.0" y="334.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (9,650 samples, 54.03%)</title><rect x="10.0" y="307.0" width="637.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.0" y="318.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (9,650 samples, 54.03%)</title><rect x="10.0" y="291.0" width="637.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="302.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (9,650 samples, 54.03%)</title><rect x="10.0" y="275.0" width="637.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.0" y="286.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (9,553 samples, 53.49%)</title><rect x="10.0" y="259.0" width="631.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="270.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (9,553 samples, 53.49%)</title><rect x="10.0" y="243.0" width="631.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="254.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl$$Lambda$65/796090938.run (9,553 samples, 53.49%)</title><rect x="10.0" y="227.0" width="631.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.0" y="238.0">ru/mail/polis/service/dariagap/ClusterServiceImpl$$Lambda$65/796090938.run</text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl.lambda$entity$1 (9,553 samples, 53.49%)</title><rect x="10.0" y="211.0" width="631.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="222.0">ru/mail/polis/service/dariagap/ClusterServiceImpl.lambda$entity$1</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (774 samples, 4.33%)</title><rect x="10.0" y="195.0" width="51.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.0" y="206.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (774 samples, 4.33%)</title><rect x="10.0" y="179.0" width="51.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="190.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (647 samples, 3.62%)</title><rect x="10.0" y="163.0" width="42.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.0" y="174.0">one/..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (647 samples, 3.62%)</title><rect x="10.0" y="147.0" width="42.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="158.0">one/..</text>
</g>
<g>
<title>byte[] (645 samples, 3.61%)</title><rect x="10.0" y="131.0" width="42.6" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="13.0" y="142.0">byte[]</text>
</g>
<g>
<title>one/nio/net/Session.write (127 samples, 0.71%)</title><rect x="52.7" y="163.0" width="8.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="55.7" y="174.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (126 samples, 0.71%)</title><rect x="52.7" y="147.0" width="8.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="55.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl.isCurrentNode (135 samples, 0.76%)</title><rect x="61.1" y="195.0" width="9.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="64.1" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (135 samples, 0.76%)</title><rect x="61.1" y="179.0" width="9.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.1" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/2001049719.invoke (135 samples, 0.76%)</title><rect x="61.1" y="163.0" width="9.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.1" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (135 samples, 0.76%)</title><rect x="61.1" y="147.0" width="9.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="64.1" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (135 samples, 0.76%)</title><rect x="61.1" y="131.0" width="9.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="64.1" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (135 samples, 0.76%)</title><rect x="61.1" y="115.0" width="9.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="64.1" y="126.0"></text>
</g>
<g>
<title>byte[] (134 samples, 0.75%)</title><rect x="61.1" y="99.0" width="8.9" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="64.1" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl.proxy (3,834 samples, 21.47%)</title><rect x="70.1" y="195.0" width="253.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="73.1" y="206.0">ru/mail/polis/service/dariagap/Clu..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (3,834 samples, 21.47%)</title><rect x="70.1" y="179.0" width="253.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="73.1" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (3,834 samples, 21.47%)</title><rect x="70.1" y="163.0" width="253.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="73.1" y="174.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (43 samples, 0.24%)</title><rect x="70.1" y="147.0" width="2.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="73.1" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (3,626 samples, 20.30%)</title><rect x="72.9" y="147.0" width="239.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="75.9" y="158.0">one/nio/http/HttpClient$Response..</text>
</g>
<g>
<title>byte[] (1,986 samples, 11.12%)</title><rect x="72.9" y="131.0" width="131.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="75.9" y="142.0">byte[]</text>
</g>
<g>
<title>byte[] (1,640 samples, 9.18%)</title><rect x="204.1" y="131.0" width="108.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="207.1" y="142.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (130 samples, 0.73%)</title><rect x="312.5" y="147.0" width="8.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="315.5" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.04%)</title><rect x="312.7" y="131.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="315.7" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7 samples, 0.04%)</title><rect x="312.7" y="115.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="315.7" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5 samples, 0.03%)</title><rect x="312.8" y="99.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="315.8" y="110.0"></text>
</g>
<g>
<title>byte[] (5 samples, 0.03%)</title><rect x="312.8" y="83.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="315.8" y="94.0"></text>
</g>
<g>
<title>one.nio.http.Response (5 samples, 0.03%)</title><rect x="313.1" y="131.0" width="0.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="316.1" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (98 samples, 0.55%)</title><rect x="313.5" y="131.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="316.5" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (98 samples, 0.55%)</title><rect x="313.5" y="115.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="316.5" y="126.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (98 samples, 0.55%)</title><rect x="313.5" y="99.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="316.5" y="110.0"></text>
</g>
<g>
<title>char[] (40 samples, 0.22%)</title><rect x="313.5" y="83.0" width="2.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="316.5" y="94.0"></text>
</g>
<g>
<title>java.lang.String (23 samples, 0.13%)</title><rect x="316.1" y="83.0" width="1.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="319.1" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (35 samples, 0.20%)</title><rect x="317.6" y="83.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="320.6" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (35 samples, 0.20%)</title><rect x="317.6" y="67.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="320.6" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (35 samples, 0.20%)</title><rect x="317.6" y="51.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="320.6" y="62.0"></text>
</g>
<g>
<title>byte[] (35 samples, 0.20%)</title><rect x="317.6" y="35.0" width="2.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="320.6" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (6 samples, 0.03%)</title><rect x="319.9" y="131.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="322.9" y="142.0"></text>
</g>
<g>
<title>java.lang.String[] (6 samples, 0.03%)</title><rect x="319.9" y="115.0" width="0.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="322.9" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (11 samples, 0.06%)</title><rect x="320.3" y="131.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="323.3" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (11 samples, 0.06%)</title><rect x="320.3" y="115.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="323.3" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (11 samples, 0.06%)</title><rect x="320.3" y="99.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="323.3" y="110.0"></text>
</g>
<g>
<title>java.lang.String (5 samples, 0.03%)</title><rect x="320.3" y="83.0" width="0.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="323.3" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (6 samples, 0.03%)</title><rect x="320.7" y="83.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="323.7" y="94.0"></text>
</g>
<g>
<title>byte[] (6 samples, 0.03%)</title><rect x="320.7" y="67.0" width="0.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="323.7" y="78.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (23 samples, 0.13%)</title><rect x="321.1" y="147.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="324.1" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (23 samples, 0.13%)</title><rect x="321.1" y="131.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="324.1" y="142.0"></text>
</g>
<g>
<title>byte[] (23 samples, 0.13%)</title><rect x="321.1" y="115.0" width="1.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="324.1" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (7 samples, 0.04%)</title><rect x="322.6" y="147.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="325.6" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.04%)</title><rect x="322.6" y="131.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="325.6" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7 samples, 0.04%)</title><rect x="322.6" y="115.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="325.6" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.02%)</title><rect x="322.8" y="99.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="325.8" y="110.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.02%)</title><rect x="322.8" y="83.0" width="0.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="325.8" y="94.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (5 samples, 0.03%)</title><rect x="323.1" y="147.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="326.1" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (5 samples, 0.03%)</title><rect x="323.1" y="131.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="326.1" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (5 samples, 0.03%)</title><rect x="323.1" y="115.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="326.1" y="126.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (5 samples, 0.03%)</title><rect x="323.1" y="99.0" width="0.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="326.1" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl.putSync (1,985 samples, 11.11%)</title><rect x="323.4" y="195.0" width="131.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="326.4" y="206.0">ru/mail/polis/se..</text>
</g>
<g>
<title>java/lang/String.getBytes (76 samples, 0.43%)</title><rect x="323.4" y="179.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="326.4" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (76 samples, 0.43%)</title><rect x="323.4" y="163.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="326.4" y="174.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (76 samples, 0.43%)</title><rect x="323.4" y="147.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="326.4" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (76 samples, 0.43%)</title><rect x="323.4" y="131.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="326.4" y="142.0"></text>
</g>
<g>
<title>byte[] (75 samples, 0.42%)</title><rect x="323.4" y="115.0" width="4.9" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="326.4" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (604 samples, 3.38%)</title><rect x="328.4" y="179.0" width="39.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="331.4" y="190.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (604 samples, 3.38%)</title><rect x="328.4" y="163.0" width="39.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="331.4" y="174.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (602 samples, 3.37%)</title><rect x="328.4" y="147.0" width="39.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="331.4" y="158.0">jav..</text>
</g>
<g>
<title>one.nio.http.Response (95 samples, 0.53%)</title><rect x="368.3" y="179.0" width="6.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="371.3" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (482 samples, 2.70%)</title><rect x="374.6" y="179.0" width="31.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="377.6" y="190.0">on..</text>
</g>
<g>
<title>byte[] (240 samples, 1.34%)</title><rect x="374.6" y="163.0" width="15.8" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="377.6" y="174.0"></text>
</g>
<g>
<title>java.lang.String[] (111 samples, 0.62%)</title><rect x="390.4" y="163.0" width="7.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="393.4" y="174.0"></text>
</g>
<g>
<title>java.lang.String (125 samples, 0.70%)</title><rect x="397.9" y="163.0" width="8.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="400.9" y="174.0"></text>
</g>
<g>
<title>java.lang.String (4 samples, 0.02%)</title><rect x="406.2" y="163.0" width="0.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="409.2" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dariagap/RocksDBStorage.upsert (728 samples, 4.08%)</title><rect x="406.4" y="179.0" width="48.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="409.4" y="190.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/util/Util.byteBufferToBytes (377 samples, 2.11%)</title><rect x="406.4" y="163.0" width="24.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="409.4" y="174.0">r..</text>
</g>
<g>
<title>byte[] (127 samples, 0.71%)</title><rect x="406.4" y="147.0" width="8.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="409.4" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (250 samples, 1.40%)</title><rect x="414.8" y="147.0" width="16.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="417.8" y="158.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (250 samples, 1.40%)</title><rect x="414.8" y="131.0" width="16.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="417.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.pack (351 samples, 1.97%)</title><rect x="431.3" y="163.0" width="23.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="434.3" y="174.0">r..</text>
</g>
<g>
<title>ru/mail/polis/util/Util.byteBufferToBytes (351 samples, 1.97%)</title><rect x="431.3" y="147.0" width="23.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="434.3" y="158.0">r..</text>
</g>
<g>
<title>byte[] (106 samples, 0.59%)</title><rect x="431.3" y="131.0" width="7.1" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="434.3" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (244 samples, 1.37%)</title><rect x="438.4" y="131.0" width="16.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="441.4" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (244 samples, 1.37%)</title><rect x="438.4" y="115.0" width="16.1" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="441.4" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.getNode (2,825 samples, 15.82%)</title><rect x="454.5" y="195.0" width="186.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="457.5" y="206.0">ru/mail/polis/util/Util...</text>
</g>
<g>
<title>java.util.HashMap (458 samples, 2.56%)</title><rect x="454.5" y="179.0" width="30.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="457.5" y="190.0">ja..</text>
</g>
<g>
<title>java/lang/Integer.valueOf (315 samples, 1.76%)</title><rect x="484.9" y="179.0" width="20.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="487.9" y="190.0"></text>
</g>
<g>
<title>java.lang.Integer (315 samples, 1.76%)</title><rect x="484.9" y="163.0" width="20.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="487.9" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (793 samples, 4.44%)</title><rect x="505.7" y="179.0" width="52.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="508.7" y="190.0">java/..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1391942103.invoke (793 samples, 4.44%)</title><rect x="505.7" y="163.0" width="52.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="508.7" y="174.0">java/..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (793 samples, 4.44%)</title><rect x="505.7" y="147.0" width="52.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="508.7" y="158.0">java/..</text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (793 samples, 4.44%)</title><rect x="505.7" y="131.0" width="52.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="508.7" y="142.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (793 samples, 4.44%)</title><rect x="505.7" y="115.0" width="52.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="508.7" y="126.0">jdk/i..</text>
</g>
<g>
<title>byte[] (789 samples, 4.42%)</title><rect x="505.7" y="99.0" width="52.1" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="508.7" y="110.0">byte[]</text>
</g>
<g>
<title>byte[] (4 samples, 0.02%)</title><rect x="557.8" y="99.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="560.8" y="110.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (402 samples, 2.25%)</title><rect x="558.1" y="179.0" width="26.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="561.1" y="190.0">j..</text>
</g>
<g>
<title>java.lang.Object[] (132 samples, 0.74%)</title><rect x="558.1" y="163.0" width="8.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="561.1" y="174.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (270 samples, 1.51%)</title><rect x="566.8" y="163.0" width="17.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="569.8" y="174.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (270 samples, 1.51%)</title><rect x="566.8" y="147.0" width="17.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="569.8" y="158.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (96 samples, 0.54%)</title><rect x="584.6" y="179.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="587.6" y="190.0"></text>
</g>
<g>
<title>java.util.HashMap$KeySet (95 samples, 0.53%)</title><rect x="584.6" y="163.0" width="6.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="587.6" y="174.0"></text>
</g>
<g>
<title>java/util/HashMap.put (760 samples, 4.26%)</title><rect x="591.0" y="179.0" width="50.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="594.0" y="190.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (760 samples, 4.26%)</title><rect x="591.0" y="163.0" width="50.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="594.0" y="174.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.newNode (433 samples, 2.42%)</title><rect x="591.0" y="147.0" width="28.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="594.0" y="158.0">ja..</text>
</g>
<g>
<title>java.util.HashMap$Node (431 samples, 2.41%)</title><rect x="591.0" y="131.0" width="28.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="594.0" y="142.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.resize (327 samples, 1.83%)</title><rect x="619.6" y="147.0" width="21.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="622.6" y="158.0">j..</text>
</g>
<g>
<title>java.util.HashMap$Node[] (326 samples, 1.83%)</title><rect x="619.6" y="131.0" width="21.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="622.6" y="142.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (97 samples, 0.54%)</title><rect x="641.2" y="259.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="644.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (97 samples, 0.54%)</title><rect x="641.2" y="243.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="644.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (97 samples, 0.54%)</title><rect x="641.2" y="227.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="644.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (97 samples, 0.54%)</title><rect x="641.2" y="211.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="644.2" y="222.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (97 samples, 0.54%)</title><rect x="641.2" y="195.0" width="6.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="644.2" y="206.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (8,209 samples, 45.97%)</title><rect x="647.6" y="307.0" width="542.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="650.6" y="318.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (371 samples, 2.08%)</title><rect x="647.6" y="291.0" width="24.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="650.6" y="302.0">o..</text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (369 samples, 2.07%)</title><rect x="647.6" y="275.0" width="24.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="650.6" y="286.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.process (7,838 samples, 43.89%)</title><rect x="672.1" y="291.0" width="517.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="675.1" y="302.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (7,838 samples, 43.89%)</title><rect x="672.1" y="275.0" width="517.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="675.1" y="286.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (7,838 samples, 43.89%)</title><rect x="672.1" y="259.0" width="517.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="675.1" y="270.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,016 samples, 11.29%)</title><rect x="672.1" y="243.0" width="133.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="675.1" y="254.0">one/nio/http/Http..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,016 samples, 11.29%)</title><rect x="672.1" y="227.0" width="133.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="675.1" y="238.0">one/nio/http/Http..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,361 samples, 7.62%)</title><rect x="672.1" y="211.0" width="89.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="675.1" y="222.0">RequestHan..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (542 samples, 3.03%)</title><rect x="672.1" y="195.0" width="35.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="675.1" y="206.0">one..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (542 samples, 3.03%)</title><rect x="672.1" y="179.0" width="35.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="675.1" y="190.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (542 samples, 3.03%)</title><rect x="672.1" y="163.0" width="35.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="675.1" y="174.0">jav..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (542 samples, 3.03%)</title><rect x="672.1" y="147.0" width="35.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="675.1" y="158.0">jav..</text>
</g>
<g>
<title>java.lang.String (387 samples, 2.17%)</title><rect x="672.1" y="131.0" width="25.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="675.1" y="142.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (154 samples, 0.86%)</title><rect x="697.8" y="131.0" width="10.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="700.8" y="142.0"></text>
</g>
<g>
<title>byte[] (154 samples, 0.86%)</title><rect x="697.8" y="115.0" width="10.1" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="700.8" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl.entity (819 samples, 4.59%)</title><rect x="707.9" y="195.0" width="54.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="710.9" y="206.0">ru/ma..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (254 samples, 1.42%)</title><rect x="707.9" y="179.0" width="16.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="710.9" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (254 samples, 1.42%)</title><rect x="707.9" y="163.0" width="16.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="710.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl$$Lambda$65/796090938.get$Lambda (254 samples, 1.42%)</title><rect x="707.9" y="147.0" width="16.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="710.9" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.service.dariagap.ClusterServiceImpl$$Lambda$65 (253 samples, 1.42%)</title><rect x="707.9" y="131.0" width="16.7" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="710.9" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (565 samples, 3.16%)</title><rect x="724.7" y="179.0" width="37.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="727.7" y="190.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.newTaskFor (565 samples, 3.16%)</title><rect x="724.7" y="163.0" width="37.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="727.7" y="174.0">jav..</text>
</g>
<g>
<title>java.util.concurrent.FutureTask (248 samples, 1.39%)</title><rect x="724.7" y="147.0" width="16.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="727.7" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.&lt;init&gt; (316 samples, 1.77%)</title><rect x="741.2" y="147.0" width="20.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="744.2" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors.callable (316 samples, 1.77%)</title><rect x="741.2" y="131.0" width="20.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="744.2" y="142.0"></text>
</g>
<g>
<title>java.util.concurrent.Executors$RunnableAdapter (316 samples, 1.77%)</title><rect x="741.2" y="115.0" width="20.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="744.2" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (655 samples, 3.67%)</title><rect x="762.0" y="211.0" width="43.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="765.0" y="222.0">one/..</text>
</g>
<g>
<title>java/lang/String.substring (655 samples, 3.67%)</title><rect x="762.0" y="195.0" width="43.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="765.0" y="206.0">java..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (655 samples, 3.67%)</title><rect x="762.0" y="179.0" width="43.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="765.0" y="190.0">java..</text>
</g>
<g>
<title>java.lang.String (363 samples, 2.03%)</title><rect x="762.0" y="163.0" width="24.0" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="765.0" y="174.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (291 samples, 1.63%)</title><rect x="786.1" y="163.0" width="19.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="789.1" y="174.0"></text>
</g>
<g>
<title>byte[] (288 samples, 1.61%)</title><rect x="786.1" y="147.0" width="19.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="789.1" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2,973 samples, 16.65%)</title><rect x="805.3" y="243.0" width="196.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="808.3" y="254.0">one/nio/http/HttpSession.p..</text>
</g>
<g>
<title>one.nio.http.Request (315 samples, 1.76%)</title><rect x="805.3" y="227.0" width="20.8" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="808.3" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1,130 samples, 6.33%)</title><rect x="826.1" y="227.0" width="74.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="829.1" y="238.0">one/nio/..</text>
</g>
<g>
<title>java.lang.String[] (1,125 samples, 6.30%)</title><rect x="826.1" y="211.0" width="74.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="829.1" y="222.0">java.lan..</text>
</g>
<g>
<title>java.lang.String[] (5 samples, 0.03%)</title><rect x="900.5" y="211.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="903.5" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,528 samples, 8.56%)</title><rect x="900.8" y="227.0" width="101.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="903.8" y="238.0">one/nio/util..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,528 samples, 8.56%)</title><rect x="900.8" y="211.0" width="101.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="903.8" y="222.0">one/nio/util..</text>
</g>
<g>
<title>char[] (1,023 samples, 5.73%)</title><rect x="900.8" y="195.0" width="67.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="903.8" y="206.0">char[]</text>
</g>
<g>
<title>java.lang.String (205 samples, 1.15%)</title><rect x="968.6" y="195.0" width="13.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="971.6" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (297 samples, 1.66%)</title><rect x="982.1" y="195.0" width="19.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="985.1" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (297 samples, 1.66%)</title><rect x="982.1" y="179.0" width="19.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="985.1" y="190.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (297 samples, 1.66%)</title><rect x="982.1" y="163.0" width="19.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="985.1" y="174.0"></text>
</g>
<g>
<title>byte[] (296 samples, 1.66%)</title><rect x="982.1" y="147.0" width="19.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="985.1" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (241 samples, 1.35%)</title><rect x="1001.8" y="243.0" width="15.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1004.8" y="254.0"></text>
</g>
<g>
<title>byte[] (241 samples, 1.35%)</title><rect x="1001.8" y="227.0" width="15.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1004.8" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (400 samples, 2.24%)</title><rect x="1017.7" y="243.0" width="26.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1020.7" y="254.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (400 samples, 2.24%)</title><rect x="1017.7" y="227.0" width="26.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1020.7" y="238.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (400 samples, 2.24%)</title><rect x="1017.7" y="211.0" width="26.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1020.7" y="222.0">j..</text>
</g>
<g>
<title>java.lang.String (210 samples, 1.18%)</title><rect x="1017.7" y="195.0" width="13.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1020.7" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (189 samples, 1.06%)</title><rect x="1031.6" y="195.0" width="12.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1034.6" y="206.0"></text>
</g>
<g>
<title>byte[] (188 samples, 1.05%)</title><rect x="1031.6" y="179.0" width="12.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1034.6" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,208 samples, 12.36%)</title><rect x="1044.1" y="243.0" width="145.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1047.1" y="254.0">one/nio/util/Utf8...</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,208 samples, 12.36%)</title><rect x="1044.1" y="227.0" width="145.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1047.1" y="238.0">one/nio/util/Utf8...</text>
</g>
<g>
<title>char[] (908 samples, 5.08%)</title><rect x="1044.1" y="211.0" width="60.0" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1047.1" y="222.0">char[]</text>
</g>
<g>
<title>java.lang.String (554 samples, 3.10%)</title><rect x="1104.2" y="211.0" width="36.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1107.2" y="222.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (744 samples, 4.17%)</title><rect x="1140.8" y="211.0" width="49.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1143.8" y="222.0">java/..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (744 samples, 4.17%)</title><rect x="1140.8" y="195.0" width="49.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1143.8" y="206.0">java/..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (744 samples, 4.17%)</title><rect x="1140.8" y="179.0" width="49.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1143.8" y="190.0">java/..</text>
</g>
<g>
<title>byte[] (742 samples, 4.15%)</title><rect x="1140.8" y="163.0" width="49.1" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1143.8" y="174.0">byte[]</text>
</g>
</g>
</svg>
