<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="373"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="373"> </text>
<g id="frames">
<g>
<title>all (17,581 samples, 100.00%)</title><rect x="10.0" y="339.0" width="1180.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="13.0" y="350.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (9,356 samples, 53.22%)</title><rect x="10.0" y="323.0" width="628.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="334.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (9,356 samples, 53.22%)</title><rect x="10.0" y="307.0" width="628.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="318.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (9,356 samples, 53.22%)</title><rect x="10.0" y="291.0" width="628.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="302.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (9,273 samples, 52.74%)</title><rect x="10.0" y="275.0" width="622.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="286.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (9,273 samples, 52.74%)</title><rect x="10.0" y="259.0" width="622.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="270.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl$$Lambda$65/796090938.run (9,273 samples, 52.74%)</title><rect x="10.0" y="243.0" width="622.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="254.0">ru/mail/polis/service/dariagap/ClusterServiceImpl$$Lambda$65/796090938.run</text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl.lambda$entity$1 (9,273 samples, 52.74%)</title><rect x="10.0" y="227.0" width="622.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="238.0">ru/mail/polis/service/dariagap/ClusterServiceImpl.lambda$entity$1</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (681 samples, 3.87%)</title><rect x="10.0" y="211.0" width="45.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="222.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (681 samples, 3.87%)</title><rect x="10.0" y="195.0" width="45.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="206.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (551 samples, 3.13%)</title><rect x="10.0" y="179.0" width="37.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="190.0">one..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (551 samples, 3.13%)</title><rect x="10.0" y="163.0" width="37.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="174.0">one..</text>
</g>
<g>
<title>byte[] (546 samples, 3.11%)</title><rect x="10.0" y="147.0" width="36.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="13.0" y="158.0">byt..</text>
</g>
<g>
<title>byte[] (5 samples, 0.03%)</title><rect x="46.6" y="147.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="49.6" y="158.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (130 samples, 0.74%)</title><rect x="47.0" y="179.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.0" y="190.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (130 samples, 0.74%)</title><rect x="47.0" y="163.0" width="8.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="50.0" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl.getSync (2,530 samples, 14.39%)</title><rect x="55.7" y="211.0" width="169.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="58.7" y="222.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>java/lang/String.getBytes (100 samples, 0.57%)</title><rect x="55.7" y="195.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="58.7" y="206.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (100 samples, 0.57%)</title><rect x="55.7" y="179.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="58.7" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (100 samples, 0.57%)</title><rect x="55.7" y="163.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.7" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (100 samples, 0.57%)</title><rect x="55.7" y="147.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="58.7" y="158.0"></text>
</g>
<g>
<title>byte[] (100 samples, 0.57%)</title><rect x="55.7" y="131.0" width="6.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="58.7" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (197 samples, 1.12%)</title><rect x="62.4" y="195.0" width="13.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.4" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (197 samples, 1.12%)</title><rect x="62.4" y="179.0" width="13.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="65.4" y="190.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (197 samples, 1.12%)</title><rect x="62.4" y="163.0" width="13.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="65.4" y="174.0"></text>
</g>
<g>
<title>one.nio.http.Response (75 samples, 0.43%)</title><rect x="75.6" y="195.0" width="5.1" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="78.6" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (349 samples, 1.99%)</title><rect x="80.7" y="195.0" width="23.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="83.7" y="206.0">o..</text>
</g>
<g>
<title>byte[] (166 samples, 0.94%)</title><rect x="80.7" y="179.0" width="11.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="83.7" y="190.0"></text>
</g>
<g>
<title>java.lang.String[] (103 samples, 0.59%)</title><rect x="91.8" y="179.0" width="6.9" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="94.8" y="190.0"></text>
</g>
<g>
<title>java.lang.String (79 samples, 0.45%)</title><rect x="98.7" y="179.0" width="5.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="101.7" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,543 samples, 8.78%)</title><rect x="104.1" y="195.0" width="103.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="107.1" y="206.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (155 samples, 0.88%)</title><rect x="104.1" y="179.0" width="10.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="107.1" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (155 samples, 0.88%)</title><rect x="104.1" y="163.0" width="10.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="107.1" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (155 samples, 0.88%)</title><rect x="104.1" y="147.0" width="10.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="107.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dariagap/RecordIterator.next (732 samples, 4.16%)</title><rect x="114.5" y="179.0" width="49.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="117.5" y="190.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/dariagap/RecordIterator.next (732 samples, 4.16%)</title><rect x="114.5" y="163.0" width="49.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="117.5" y="174.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (239 samples, 1.36%)</title><rect x="114.5" y="147.0" width="16.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="117.5" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (239 samples, 1.36%)</title><rect x="114.5" y="131.0" width="16.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="117.5" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (239 samples, 1.36%)</title><rect x="114.5" y="115.0" width="16.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="117.5" y="126.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.key (97 samples, 0.55%)</title><rect x="130.5" y="147.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="133.5" y="158.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.key0 (97 samples, 0.55%)</title><rect x="130.5" y="131.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="133.5" y="142.0"></text>
</g>
<g>
<title>byte[] (97 samples, 0.55%)</title><rect x="130.5" y="115.0" width="6.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="133.5" y="126.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.value (133 samples, 0.76%)</title><rect x="137.1" y="147.0" width="8.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="140.1" y="158.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.value0 (133 samples, 0.76%)</title><rect x="137.1" y="131.0" width="8.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="140.1" y="142.0"></text>
</g>
<g>
<title>byte[] (133 samples, 0.76%)</title><rect x="137.1" y="115.0" width="8.9" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="140.1" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.unpack (263 samples, 1.50%)</title><rect x="146.0" y="147.0" width="17.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="149.0" y="158.0"></text>
</g>
<g>
<title>byte[] (57 samples, 0.32%)</title><rect x="146.0" y="131.0" width="3.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="149.0" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (206 samples, 1.17%)</title><rect x="149.8" y="131.0" width="13.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="152.8" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (206 samples, 1.17%)</title><rect x="149.8" y="115.0" width="13.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="152.8" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (204 samples, 1.16%)</title><rect x="149.8" y="99.0" width="13.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="152.8" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dariagap/RocksDBStorage.iterator (656 samples, 3.73%)</title><rect x="163.6" y="179.0" width="44.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="166.6" y="190.0">ru/m..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.newIterator (334 samples, 1.90%)</title><rect x="163.6" y="163.0" width="22.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="166.6" y="174.0">o..</text>
</g>
<g>
<title>org.rocksdb.RocksIterator (121 samples, 0.69%)</title><rect x="163.6" y="147.0" width="8.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="166.6" y="158.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.&lt;init&gt; (211 samples, 1.20%)</title><rect x="171.9" y="147.0" width="14.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="174.9" y="158.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.&lt;init&gt; (211 samples, 1.20%)</title><rect x="171.9" y="131.0" width="14.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="174.9" y="142.0"></text>
</g>
<g>
<title>org/rocksdb/RocksObject.&lt;init&gt; (211 samples, 1.20%)</title><rect x="171.9" y="115.0" width="14.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="174.9" y="126.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.&lt;init&gt; (211 samples, 1.20%)</title><rect x="171.9" y="99.0" width="14.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="174.9" y="110.0"></text>
</g>
<g>
<title>java.util.concurrent.atomic.AtomicBoolean (73 samples, 0.42%)</title><rect x="171.9" y="83.0" width="4.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="174.9" y="94.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractNativeReference.&lt;init&gt; (137 samples, 0.78%)</title><rect x="176.9" y="83.0" width="9.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="179.9" y="94.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (137 samples, 0.78%)</title><rect x="176.9" y="67.0" width="9.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="179.9" y="78.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer.register (137 samples, 0.78%)</title><rect x="176.9" y="51.0" width="9.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="179.9" y="62.0"></text>
</g>
<g>
<title>java.lang.ref.Finalizer (137 samples, 0.78%)</title><rect x="176.9" y="35.0" width="9.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="179.9" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.pack (322 samples, 1.83%)</title><rect x="186.1" y="163.0" width="21.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="189.1" y="174.0">r..</text>
</g>
<g>
<title>ru/mail/polis/util/Util.byteBufferToBytes (322 samples, 1.83%)</title><rect x="186.1" y="147.0" width="21.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="189.1" y="158.0">r..</text>
</g>
<g>
<title>byte[] (116 samples, 0.66%)</title><rect x="186.1" y="131.0" width="7.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="189.1" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (205 samples, 1.17%)</title><rect x="193.9" y="131.0" width="13.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="196.9" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (203 samples, 1.15%)</title><rect x="193.9" y="115.0" width="13.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="196.9" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.byteBufferToBytes (266 samples, 1.51%)</title><rect x="207.7" y="195.0" width="17.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="210.7" y="206.0"></text>
</g>
<g>
<title>byte[] (142 samples, 0.81%)</title><rect x="207.7" y="179.0" width="9.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="210.7" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (124 samples, 0.71%)</title><rect x="217.2" y="179.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="220.2" y="190.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (124 samples, 0.71%)</title><rect x="217.2" y="163.0" width="8.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="220.2" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl.isCurrentNode (172 samples, 0.98%)</title><rect x="225.5" y="211.0" width="11.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.5" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (172 samples, 0.98%)</title><rect x="225.5" y="195.0" width="11.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="228.5" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/2001049719.invoke (172 samples, 0.98%)</title><rect x="225.5" y="179.0" width="11.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.5" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (172 samples, 0.98%)</title><rect x="225.5" y="163.0" width="11.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="228.5" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (172 samples, 0.98%)</title><rect x="225.5" y="147.0" width="11.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.5" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (172 samples, 0.98%)</title><rect x="225.5" y="131.0" width="11.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="228.5" y="142.0"></text>
</g>
<g>
<title>byte[] (172 samples, 0.98%)</title><rect x="225.5" y="115.0" width="11.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="228.5" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl.proxy (3,656 samples, 20.80%)</title><rect x="237.1" y="211.0" width="245.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.1" y="222.0">ru/mail/polis/service/dariagap/Cl..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (3,656 samples, 20.80%)</title><rect x="237.1" y="195.0" width="245.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="240.1" y="206.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (3,656 samples, 20.80%)</title><rect x="237.1" y="179.0" width="245.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="240.1" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (46 samples, 0.26%)</title><rect x="237.1" y="163.0" width="3.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="240.1" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (3,419 samples, 19.45%)</title><rect x="240.1" y="163.0" width="229.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="243.1" y="174.0">one/nio/http/HttpClient$Respon..</text>
</g>
<g>
<title>byte[] (1,942 samples, 11.05%)</title><rect x="240.1" y="147.0" width="130.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="243.1" y="158.0">byte[]</text>
</g>
<g>
<title>byte[] (1,477 samples, 8.40%)</title><rect x="370.5" y="147.0" width="99.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="373.5" y="158.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (145 samples, 0.82%)</title><rect x="469.6" y="163.0" width="9.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="472.6" y="174.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.02%)</title><rect x="469.6" y="147.0" width="0.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="472.6" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (16 samples, 0.09%)</title><rect x="469.9" y="147.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="472.9" y="158.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (16 samples, 0.09%)</title><rect x="469.9" y="131.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="472.9" y="142.0"></text>
</g>
<g>
<title>java.lang.String (6 samples, 0.03%)</title><rect x="469.9" y="115.0" width="0.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="472.9" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (9 samples, 0.05%)</title><rect x="470.4" y="115.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="473.4" y="126.0"></text>
</g>
<g>
<title>byte[] (8 samples, 0.05%)</title><rect x="470.4" y="99.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="473.4" y="110.0"></text>
</g>
<g>
<title>one.nio.http.Response (4 samples, 0.02%)</title><rect x="471.0" y="147.0" width="0.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="474.0" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (98 samples, 0.56%)</title><rect x="471.3" y="147.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="474.3" y="158.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (98 samples, 0.56%)</title><rect x="471.3" y="131.0" width="6.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="474.3" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (98 samples, 0.56%)</title><rect x="471.3" y="115.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="474.3" y="126.0"></text>
</g>
<g>
<title>char[] (47 samples, 0.27%)</title><rect x="471.3" y="99.0" width="3.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="474.3" y="110.0"></text>
</g>
<g>
<title>java.lang.String (23 samples, 0.13%)</title><rect x="474.6" y="99.0" width="1.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="477.6" y="110.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (25 samples, 0.14%)</title><rect x="476.2" y="99.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="479.2" y="110.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (25 samples, 0.14%)</title><rect x="476.2" y="83.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="479.2" y="94.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (25 samples, 0.14%)</title><rect x="476.2" y="67.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="479.2" y="78.0"></text>
</g>
<g>
<title>byte[] (24 samples, 0.14%)</title><rect x="476.2" y="51.0" width="1.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="479.2" y="62.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (10 samples, 0.06%)</title><rect x="477.9" y="147.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.9" y="158.0"></text>
</g>
<g>
<title>java.lang.String[] (9 samples, 0.05%)</title><rect x="477.9" y="131.0" width="0.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="480.9" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (12 samples, 0.07%)</title><rect x="478.6" y="147.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="481.6" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (12 samples, 0.07%)</title><rect x="478.6" y="131.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="481.6" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (12 samples, 0.07%)</title><rect x="478.6" y="115.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="481.6" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (9 samples, 0.05%)</title><rect x="478.8" y="99.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="481.8" y="110.0"></text>
</g>
<g>
<title>byte[] (9 samples, 0.05%)</title><rect x="478.8" y="83.0" width="0.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="481.8" y="94.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (28 samples, 0.16%)</title><rect x="479.4" y="163.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="482.4" y="174.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (28 samples, 0.16%)</title><rect x="479.4" y="147.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="482.4" y="158.0"></text>
</g>
<g>
<title>byte[] (28 samples, 0.16%)</title><rect x="479.4" y="131.0" width="1.8" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="482.4" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (15 samples, 0.09%)</title><rect x="481.2" y="163.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="484.2" y="174.0"></text>
</g>
<g>
<title>java/lang/String.substring (15 samples, 0.09%)</title><rect x="481.2" y="147.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="484.2" y="158.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (15 samples, 0.09%)</title><rect x="481.2" y="131.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="484.2" y="142.0"></text>
</g>
<g>
<title>java.lang.String (8 samples, 0.05%)</title><rect x="481.2" y="115.0" width="0.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="484.2" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (7 samples, 0.04%)</title><rect x="481.8" y="115.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="484.8" y="126.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.04%)</title><rect x="481.8" y="99.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="484.8" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.getNode (2,234 samples, 12.71%)</title><rect x="482.4" y="211.0" width="150.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="485.4" y="222.0">ru/mail/polis/util/..</text>
</g>
<g>
<title>java.util.HashMap (448 samples, 2.55%)</title><rect x="482.4" y="195.0" width="30.1" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="485.4" y="206.0">ja..</text>
</g>
<g>
<title>java/lang/Integer.valueOf (123 samples, 0.70%)</title><rect x="512.5" y="195.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="515.5" y="206.0"></text>
</g>
<g>
<title>java.lang.Integer (123 samples, 0.70%)</title><rect x="512.5" y="179.0" width="8.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="515.5" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (695 samples, 3.95%)</title><rect x="520.8" y="195.0" width="46.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="523.8" y="206.0">java..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1391942103.invoke (695 samples, 3.95%)</title><rect x="520.8" y="179.0" width="46.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="523.8" y="190.0">java..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (695 samples, 3.95%)</title><rect x="520.8" y="163.0" width="46.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="523.8" y="174.0">java..</text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (695 samples, 3.95%)</title><rect x="520.8" y="147.0" width="46.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="523.8" y="158.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (695 samples, 3.95%)</title><rect x="520.8" y="131.0" width="46.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="523.8" y="142.0">jdk/..</text>
</g>
<g>
<title>byte[] (695 samples, 3.95%)</title><rect x="520.8" y="115.0" width="46.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="523.8" y="126.0">byte[]</text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (196 samples, 1.11%)</title><rect x="567.4" y="195.0" width="13.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="570.4" y="206.0"></text>
</g>
<g>
<title>java.lang.Object[] (74 samples, 0.42%)</title><rect x="567.4" y="179.0" width="5.0" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="570.4" y="190.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (122 samples, 0.69%)</title><rect x="572.4" y="179.0" width="8.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="575.4" y="190.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (122 samples, 0.69%)</title><rect x="572.4" y="163.0" width="8.2" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="575.4" y="174.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (84 samples, 0.48%)</title><rect x="580.6" y="195.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="583.6" y="206.0"></text>
</g>
<g>
<title>java.util.HashMap$KeySet (84 samples, 0.48%)</title><rect x="580.6" y="179.0" width="5.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="583.6" y="190.0"></text>
</g>
<g>
<title>java/util/HashMap.put (688 samples, 3.91%)</title><rect x="586.2" y="195.0" width="46.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="589.2" y="206.0">java..</text>
</g>
<g>
<title>java/util/HashMap.putVal (688 samples, 3.91%)</title><rect x="586.2" y="179.0" width="46.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="589.2" y="190.0">java..</text>
</g>
<g>
<title>java/util/HashMap.newNode (395 samples, 2.25%)</title><rect x="586.2" y="163.0" width="26.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="589.2" y="174.0">j..</text>
</g>
<g>
<title>java.util.HashMap$Node (394 samples, 2.24%)</title><rect x="586.2" y="147.0" width="26.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="589.2" y="158.0">j..</text>
</g>
<g>
<title>java/util/HashMap.resize (293 samples, 1.67%)</title><rect x="612.7" y="163.0" width="19.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="615.7" y="174.0"></text>
</g>
<g>
<title>java.util.HashMap$Node[] (292 samples, 1.66%)</title><rect x="612.7" y="147.0" width="19.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="615.7" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (83 samples, 0.47%)</title><rect x="632.4" y="275.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="635.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (83 samples, 0.47%)</title><rect x="632.4" y="259.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="635.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (83 samples, 0.47%)</title><rect x="632.4" y="243.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="635.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (83 samples, 0.47%)</title><rect x="632.4" y="227.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="635.4" y="238.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (81 samples, 0.46%)</title><rect x="632.4" y="211.0" width="5.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="635.4" y="222.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (8,225 samples, 46.78%)</title><rect x="638.0" y="323.0" width="552.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="641.0" y="334.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (1,057 samples, 6.01%)</title><rect x="638.0" y="307.0" width="70.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="641.0" y="318.0">one/nio/..</text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (1,057 samples, 6.01%)</title><rect x="638.0" y="291.0" width="70.9" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="641.0" y="302.0">one.nio...</text>
</g>
<g>
<title>one/nio/net/Session.process (7,168 samples, 40.77%)</title><rect x="708.9" y="307.0" width="481.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="711.9" y="318.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (7,168 samples, 40.77%)</title><rect x="708.9" y="291.0" width="481.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="711.9" y="302.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (7,168 samples, 40.77%)</title><rect x="708.9" y="275.0" width="481.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="711.9" y="286.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,230 samples, 12.68%)</title><rect x="708.9" y="259.0" width="149.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="711.9" y="270.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,230 samples, 12.68%)</title><rect x="708.9" y="243.0" width="149.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="711.9" y="254.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,614 samples, 9.18%)</title><rect x="708.9" y="227.0" width="108.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="711.9" y="238.0">RequestHandle..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (679 samples, 3.86%)</title><rect x="708.9" y="211.0" width="45.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="711.9" y="222.0">one/..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (679 samples, 3.86%)</title><rect x="708.9" y="195.0" width="45.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="711.9" y="206.0">one/..</text>
</g>
<g>
<title>java/lang/String.substring (679 samples, 3.86%)</title><rect x="708.9" y="179.0" width="45.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="711.9" y="190.0">java..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (679 samples, 3.86%)</title><rect x="708.9" y="163.0" width="45.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="711.9" y="174.0">java..</text>
</g>
<g>
<title>java.lang.String (292 samples, 1.66%)</title><rect x="708.9" y="147.0" width="19.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="711.9" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (385 samples, 2.19%)</title><rect x="728.6" y="147.0" width="25.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="731.6" y="158.0">j..</text>
</g>
<g>
<title>byte[] (383 samples, 2.18%)</title><rect x="728.6" y="131.0" width="25.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="731.6" y="142.0">b..</text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl.entity (935 samples, 5.32%)</title><rect x="754.5" y="211.0" width="62.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="757.5" y="222.0">ru/mai..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (401 samples, 2.28%)</title><rect x="754.5" y="195.0" width="26.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="757.5" y="206.0">j..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (401 samples, 2.28%)</title><rect x="754.5" y="179.0" width="26.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="757.5" y="190.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl$$Lambda$65/796090938.get$Lambda (401 samples, 2.28%)</title><rect x="754.5" y="163.0" width="26.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="757.5" y="174.0">r..</text>
</g>
<g>
<title>ru.mail.polis.service.dariagap.ClusterServiceImpl$$Lambda$65 (401 samples, 2.28%)</title><rect x="754.5" y="147.0" width="26.9" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="757.5" y="158.0">r..</text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (534 samples, 3.04%)</title><rect x="781.4" y="195.0" width="35.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="784.4" y="206.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.newTaskFor (534 samples, 3.04%)</title><rect x="781.4" y="179.0" width="35.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="784.4" y="190.0">jav..</text>
</g>
<g>
<title>java.util.concurrent.FutureTask (384 samples, 2.18%)</title><rect x="781.4" y="163.0" width="25.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="784.4" y="174.0">j..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.&lt;init&gt; (148 samples, 0.84%)</title><rect x="807.3" y="163.0" width="9.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="810.3" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors.callable (148 samples, 0.84%)</title><rect x="807.3" y="147.0" width="9.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="810.3" y="158.0"></text>
</g>
<g>
<title>java.util.concurrent.Executors$RunnableAdapter (148 samples, 0.84%)</title><rect x="807.3" y="131.0" width="9.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="810.3" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (616 samples, 3.50%)</title><rect x="817.2" y="227.0" width="41.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="820.2" y="238.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (616 samples, 3.50%)</title><rect x="817.2" y="211.0" width="41.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="820.2" y="222.0">jav..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (616 samples, 3.50%)</title><rect x="817.2" y="195.0" width="41.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="820.2" y="206.0">jav..</text>
</g>
<g>
<title>java.lang.String (252 samples, 1.43%)</title><rect x="817.2" y="179.0" width="16.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="820.2" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (362 samples, 2.06%)</title><rect x="834.3" y="179.0" width="24.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="837.3" y="190.0">j..</text>
</g>
<g>
<title>byte[] (362 samples, 2.06%)</title><rect x="834.3" y="163.0" width="24.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="837.3" y="174.0">b..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3,211 samples, 18.26%)</title><rect x="858.6" y="259.0" width="215.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="861.6" y="270.0">one/nio/http/HttpSession.par..</text>
</g>
<g>
<title>one.nio.http.Request (497 samples, 2.83%)</title><rect x="858.6" y="243.0" width="33.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="861.6" y="254.0">on..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1,327 samples, 7.55%)</title><rect x="892.1" y="243.0" width="89.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="895.1" y="254.0">one/nio/ht..</text>
</g>
<g>
<title>java.lang.String[] (1,320 samples, 7.51%)</title><rect x="892.1" y="227.0" width="88.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="895.1" y="238.0">java.lang...</text>
</g>
<g>
<title>java.lang.String[] (7 samples, 0.04%)</title><rect x="980.7" y="227.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="983.7" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,384 samples, 7.87%)</title><rect x="981.2" y="243.0" width="92.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="984.2" y="254.0">one/nio/uti..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,384 samples, 7.87%)</title><rect x="981.2" y="227.0" width="92.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="984.2" y="238.0">one/nio/uti..</text>
</g>
<g>
<title>char[] (630 samples, 3.58%)</title><rect x="981.2" y="211.0" width="42.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="984.2" y="222.0">char[]</text>
</g>
<g>
<title>java.lang.String (263 samples, 1.50%)</title><rect x="1023.5" y="211.0" width="17.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1026.5" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (488 samples, 2.78%)</title><rect x="1041.3" y="211.0" width="32.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1044.3" y="222.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (488 samples, 2.78%)</title><rect x="1041.3" y="195.0" width="32.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1044.3" y="206.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (488 samples, 2.78%)</title><rect x="1041.3" y="179.0" width="32.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1044.3" y="190.0">ja..</text>
</g>
<g>
<title>byte[] (487 samples, 2.77%)</title><rect x="1041.3" y="163.0" width="32.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1044.3" y="174.0">by..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,727 samples, 9.82%)</title><rect x="1074.1" y="259.0" width="115.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1077.1" y="270.0">one/nio/util/U..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,727 samples, 9.82%)</title><rect x="1074.1" y="243.0" width="115.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1077.1" y="254.0">one/nio/util/U..</text>
</g>
<g>
<title>char[] (888 samples, 5.05%)</title><rect x="1074.1" y="227.0" width="59.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1077.1" y="238.0">char[]</text>
</g>
<g>
<title>java.lang.String (309 samples, 1.76%)</title><rect x="1133.8" y="227.0" width="20.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1136.8" y="238.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (528 samples, 3.00%)</title><rect x="1154.6" y="227.0" width="35.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1157.6" y="238.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (528 samples, 3.00%)</title><rect x="1154.6" y="211.0" width="35.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1157.6" y="222.0">jav..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (528 samples, 3.00%)</title><rect x="1154.6" y="195.0" width="35.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1157.6" y="206.0">jav..</text>
</g>
<g>
<title>byte[] (526 samples, 2.99%)</title><rect x="1154.6" y="179.0" width="35.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="1157.6" y="190.0">byt..</text>
</g>
</g>
</svg>
