<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="357"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="357"> </text>
<g id="frames">
<g>
<title>all (26,903 samples, 100.00%)</title><rect x="10.0" y="323.0" width="1180.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="13.0" y="334.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (13,226 samples, 49.16%)</title><rect x="10.0" y="307.0" width="580.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="318.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (13,226 samples, 49.16%)</title><rect x="10.0" y="291.0" width="580.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="302.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (13,226 samples, 49.16%)</title><rect x="10.0" y="275.0" width="580.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="286.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (359 samples, 1.33%)</title><rect x="10.0" y="259.0" width="15.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (359 samples, 1.33%)</title><rect x="10.0" y="243.0" width="15.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (359 samples, 1.33%)</title><rect x="10.0" y="227.0" width="15.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (359 samples, 1.33%)</title><rect x="10.0" y="211.0" width="15.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (352 samples, 1.31%)</title><rect x="10.0" y="195.0" width="15.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (7 samples, 0.03%)</title><rect x="25.4" y="195.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="28.4" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl$$Lambda$65/1168571660.run (12,867 samples, 47.83%)</title><rect x="25.7" y="259.0" width="564.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.7" y="270.0">ru/mail/polis/service/dariagap/ClusterServiceImpl$$Lambda$65/1168571660.run</text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl.lambda$entity$0 (12,867 samples, 47.83%)</title><rect x="25.7" y="243.0" width="564.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.7" y="254.0">ru/mail/polis/service/dariagap/ClusterServiceImpl.lambda$entity$0</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1,900 samples, 7.06%)</title><rect x="25.7" y="227.0" width="83.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.7" y="238.0">one/nio/h..</text>
</g>
<g>
<title>java/lang/String.substring (1,900 samples, 7.06%)</title><rect x="25.7" y="211.0" width="83.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.7" y="222.0">java/lang..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,900 samples, 7.06%)</title><rect x="25.7" y="195.0" width="83.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="28.7" y="206.0">java/lang..</text>
</g>
<g>
<title>java.lang.String (1,729 samples, 6.43%)</title><rect x="25.7" y="179.0" width="75.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="28.7" y="190.0">java.lan..</text>
</g>
<g>
<title>java.lang.String (6 samples, 0.02%)</title><rect x="101.6" y="179.0" width="0.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="104.6" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (165 samples, 0.61%)</title><rect x="101.8" y="179.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="104.8" y="190.0"></text>
</g>
<g>
<title>byte[] (157 samples, 0.58%)</title><rect x="101.8" y="163.0" width="6.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="104.8" y="174.0"></text>
</g>
<g>
<title>byte[] (8 samples, 0.03%)</title><rect x="108.7" y="163.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="111.7" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl.getResponseFromCurrent (4,916 samples, 18.27%)</title><rect x="109.1" y="227.0" width="215.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="112.1" y="238.0">ru/mail/polis/service/dariag..</text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl.getSync (4,916 samples, 18.27%)</title><rect x="109.1" y="211.0" width="215.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="112.1" y="222.0">ru/mail/polis/service/dariag..</text>
</g>
<g>
<title>java/lang/String.getBytes (322 samples, 1.20%)</title><rect x="109.1" y="195.0" width="14.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="112.1" y="206.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (322 samples, 1.20%)</title><rect x="109.1" y="179.0" width="14.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="112.1" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (322 samples, 1.20%)</title><rect x="109.1" y="163.0" width="14.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="112.1" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (322 samples, 1.20%)</title><rect x="109.1" y="147.0" width="14.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="112.1" y="158.0"></text>
</g>
<g>
<title>byte[] (315 samples, 1.17%)</title><rect x="109.1" y="131.0" width="13.8" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="112.1" y="142.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.03%)</title><rect x="122.9" y="131.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="125.9" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (350 samples, 1.30%)</title><rect x="123.2" y="195.0" width="15.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="126.2" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (350 samples, 1.30%)</title><rect x="123.2" y="179.0" width="15.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="126.2" y="190.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (342 samples, 1.27%)</title><rect x="123.2" y="163.0" width="15.0" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="126.2" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (8 samples, 0.03%)</title><rect x="138.2" y="163.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="141.2" y="174.0"></text>
</g>
<g>
<title>one.nio.http.Response (140 samples, 0.52%)</title><rect x="138.6" y="195.0" width="6.1" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="141.6" y="206.0"></text>
</g>
<g>
<title>one.nio.http.Response (7 samples, 0.03%)</title><rect x="144.7" y="195.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="147.7" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (688 samples, 2.56%)</title><rect x="145.0" y="195.0" width="30.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="148.0" y="206.0">on..</text>
</g>
<g>
<title>byte[] (230 samples, 0.85%)</title><rect x="145.0" y="179.0" width="10.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="148.0" y="190.0"></text>
</g>
<g>
<title>byte[] (8 samples, 0.03%)</title><rect x="155.1" y="179.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="158.1" y="190.0"></text>
</g>
<g>
<title>java.lang.String[] (241 samples, 0.90%)</title><rect x="155.4" y="179.0" width="10.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="158.4" y="190.0"></text>
</g>
<g>
<title>java.lang.String[] (10 samples, 0.04%)</title><rect x="166.0" y="179.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="169.0" y="190.0"></text>
</g>
<g>
<title>java.lang.String (190 samples, 0.71%)</title><rect x="166.5" y="179.0" width="8.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="169.5" y="190.0"></text>
</g>
<g>
<title>java.lang.String (9 samples, 0.03%)</title><rect x="174.8" y="179.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="177.8" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (2,872 samples, 10.68%)</title><rect x="175.2" y="195.0" width="126.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="178.2" y="206.0">ru/mail/polis/d..</text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (304 samples, 1.13%)</title><rect x="175.2" y="179.0" width="13.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="178.2" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (304 samples, 1.13%)</title><rect x="175.2" y="163.0" width="13.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="178.2" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (293 samples, 1.09%)</title><rect x="175.2" y="147.0" width="12.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="178.2" y="158.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (11 samples, 0.04%)</title><rect x="188.0" y="147.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="191.0" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dariagap/RecordIterator.next (1,388 samples, 5.16%)</title><rect x="188.5" y="179.0" width="60.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="191.5" y="190.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/dariagap/RecordIterator.next (1,388 samples, 5.16%)</title><rect x="188.5" y="163.0" width="60.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="191.5" y="174.0">ru/mai..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (289 samples, 1.07%)</title><rect x="188.5" y="147.0" width="12.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="191.5" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (289 samples, 1.07%)</title><rect x="188.5" y="131.0" width="12.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="191.5" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (280 samples, 1.04%)</title><rect x="188.5" y="115.0" width="12.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="191.5" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (9 samples, 0.03%)</title><rect x="200.8" y="115.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="203.8" y="126.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.key (309 samples, 1.15%)</title><rect x="201.2" y="147.0" width="13.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="204.2" y="158.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.key0 (309 samples, 1.15%)</title><rect x="201.2" y="131.0" width="13.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.2" y="142.0"></text>
</g>
<g>
<title>byte[] (304 samples, 1.13%)</title><rect x="201.2" y="115.0" width="13.3" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="204.2" y="126.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.value (274 samples, 1.02%)</title><rect x="214.7" y="147.0" width="12.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="217.7" y="158.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.value0 (274 samples, 1.02%)</title><rect x="214.7" y="131.0" width="12.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="217.7" y="142.0"></text>
</g>
<g>
<title>byte[] (263 samples, 0.98%)</title><rect x="214.7" y="115.0" width="11.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="217.7" y="126.0"></text>
</g>
<g>
<title>byte[] (11 samples, 0.04%)</title><rect x="226.3" y="115.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="229.3" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.unpack (516 samples, 1.92%)</title><rect x="226.8" y="147.0" width="22.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="229.8" y="158.0">r..</text>
</g>
<g>
<title>byte[] (194 samples, 0.72%)</title><rect x="226.8" y="131.0" width="8.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="229.8" y="142.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.03%)</title><rect x="235.3" y="131.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="238.3" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (315 samples, 1.17%)</title><rect x="235.6" y="131.0" width="13.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.6" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (315 samples, 1.17%)</title><rect x="235.6" y="115.0" width="13.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="238.6" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (306 samples, 1.14%)</title><rect x="235.6" y="99.0" width="13.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="238.6" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (9 samples, 0.03%)</title><rect x="249.0" y="99.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="252.0" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dariagap/RocksDBStorage.iterator (1,180 samples, 4.39%)</title><rect x="249.4" y="179.0" width="51.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="252.4" y="190.0">ru/ma..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.newIterator (680 samples, 2.53%)</title><rect x="249.4" y="163.0" width="29.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="252.4" y="174.0">or..</text>
</g>
<g>
<title>org.rocksdb.RocksIterator (238 samples, 0.88%)</title><rect x="249.4" y="147.0" width="10.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="252.4" y="158.0"></text>
</g>
<g>
<title>org.rocksdb.RocksIterator (13 samples, 0.05%)</title><rect x="259.8" y="147.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="262.8" y="158.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.&lt;init&gt; (429 samples, 1.59%)</title><rect x="260.4" y="147.0" width="18.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="263.4" y="158.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.&lt;init&gt; (429 samples, 1.59%)</title><rect x="260.4" y="131.0" width="18.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="263.4" y="142.0"></text>
</g>
<g>
<title>org/rocksdb/RocksObject.&lt;init&gt; (429 samples, 1.59%)</title><rect x="260.4" y="115.0" width="18.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.4" y="126.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.&lt;init&gt; (429 samples, 1.59%)</title><rect x="260.4" y="99.0" width="18.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="263.4" y="110.0"></text>
</g>
<g>
<title>java.util.concurrent.atomic.AtomicBoolean (101 samples, 0.38%)</title><rect x="260.4" y="83.0" width="4.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="263.4" y="94.0"></text>
</g>
<g>
<title>java.util.concurrent.atomic.AtomicBoolean (7 samples, 0.03%)</title><rect x="264.8" y="83.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="267.8" y="94.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractNativeReference.&lt;init&gt; (321 samples, 1.19%)</title><rect x="265.1" y="83.0" width="14.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.1" y="94.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (321 samples, 1.19%)</title><rect x="265.1" y="67.0" width="14.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="268.1" y="78.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer.register (321 samples, 1.19%)</title><rect x="265.1" y="51.0" width="14.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.1" y="62.0"></text>
</g>
<g>
<title>java.lang.ref.Finalizer (314 samples, 1.17%)</title><rect x="265.1" y="35.0" width="13.8" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="268.1" y="46.0"></text>
</g>
<g>
<title>java.lang.ref.Finalizer (7 samples, 0.03%)</title><rect x="278.9" y="35.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="281.9" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.pack (500 samples, 1.86%)</title><rect x="279.2" y="163.0" width="22.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.2" y="174.0">r..</text>
</g>
<g>
<title>ru/mail/polis/util/Util.byteBufferToBytes (500 samples, 1.86%)</title><rect x="279.2" y="147.0" width="22.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.2" y="158.0">r..</text>
</g>
<g>
<title>byte[] (177 samples, 0.66%)</title><rect x="279.2" y="131.0" width="7.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="282.2" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (318 samples, 1.18%)</title><rect x="287.2" y="131.0" width="14.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="290.2" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (312 samples, 1.16%)</title><rect x="287.2" y="115.0" width="13.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="290.2" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6 samples, 0.02%)</title><rect x="300.9" y="115.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="303.9" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.byteBufferToBytes (537 samples, 2.00%)</title><rect x="301.2" y="195.0" width="23.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="304.2" y="206.0">r..</text>
</g>
<g>
<title>byte[] (228 samples, 0.85%)</title><rect x="301.2" y="179.0" width="10.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="304.2" y="190.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.03%)</title><rect x="311.2" y="179.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="314.2" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (302 samples, 1.12%)</title><rect x="311.5" y="179.0" width="13.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.5" y="190.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (294 samples, 1.09%)</title><rect x="311.5" y="163.0" width="12.9" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="314.5" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (8 samples, 0.03%)</title><rect x="324.4" y="163.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="327.4" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl.getResponseFromGateNode (4,186 samples, 15.56%)</title><rect x="324.7" y="227.0" width="183.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="327.7" y="238.0">ru/mail/polis/service/da..</text>
</g>
<g>
<title>ru.mail.polis.util.Replicas (17 samples, 0.06%)</title><rect x="324.7" y="211.0" width="0.8" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="327.7" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl.getResponseFromCurrent (164 samples, 0.61%)</title><rect x="325.5" y="211.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="328.5" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl.getSync (164 samples, 0.61%)</title><rect x="325.5" y="195.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="328.5" y="206.0"></text>
</g>
<g>
<title>one.nio.http.Response (32 samples, 0.12%)</title><rect x="325.5" y="179.0" width="1.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="328.5" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (72 samples, 0.27%)</title><rect x="326.9" y="179.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="329.9" y="190.0"></text>
</g>
<g>
<title>byte[] (36 samples, 0.13%)</title><rect x="326.9" y="163.0" width="1.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="329.9" y="174.0"></text>
</g>
<g>
<title>java.lang.String[] (12 samples, 0.04%)</title><rect x="328.4" y="163.0" width="0.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="331.4" y="174.0"></text>
</g>
<g>
<title>java.lang.String (24 samples, 0.09%)</title><rect x="329.0" y="163.0" width="1.0" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="332.0" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (24 samples, 0.09%)</title><rect x="330.0" y="179.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="333.0" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (24 samples, 0.09%)</title><rect x="330.0" y="163.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="333.0" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (24 samples, 0.09%)</title><rect x="330.0" y="147.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="333.0" y="158.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (24 samples, 0.09%)</title><rect x="330.0" y="131.0" width="1.1" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="333.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.byteBufferToBytes (36 samples, 0.13%)</title><rect x="331.1" y="179.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="334.1" y="190.0"></text>
</g>
<g>
<title>byte[] (12 samples, 0.04%)</title><rect x="331.1" y="163.0" width="0.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="334.1" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (24 samples, 0.09%)</title><rect x="331.6" y="163.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="334.6" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (24 samples, 0.09%)</title><rect x="331.6" y="147.0" width="1.0" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="334.6" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl.proxy (3,909 samples, 14.53%)</title><rect x="332.6" y="211.0" width="171.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="335.6" y="222.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (3,909 samples, 14.53%)</title><rect x="332.6" y="195.0" width="171.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="335.6" y="206.0">one/nio/http/HttpClien..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (3,909 samples, 14.53%)</title><rect x="332.6" y="179.0" width="171.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="335.6" y="190.0">one/nio/http/HttpClien..</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (79 samples, 0.29%)</title><rect x="332.6" y="163.0" width="3.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="335.6" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (3,450 samples, 12.82%)</title><rect x="336.1" y="163.0" width="151.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="339.1" y="174.0">one/nio/http/HttpCl..</text>
</g>
<g>
<title>byte[] (3,437 samples, 12.78%)</title><rect x="336.1" y="147.0" width="150.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="339.1" y="158.0">byte[]</text>
</g>
<g>
<title>byte[] (13 samples, 0.05%)</title><rect x="486.9" y="147.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="489.9" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (124 samples, 0.46%)</title><rect x="487.4" y="163.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="490.4" y="174.0"></text>
</g>
<g>
<title>byte[] (36 samples, 0.13%)</title><rect x="487.4" y="147.0" width="1.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="490.4" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (88 samples, 0.33%)</title><rect x="489.0" y="147.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="492.0" y="158.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (88 samples, 0.33%)</title><rect x="489.0" y="131.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="492.0" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (88 samples, 0.33%)</title><rect x="489.0" y="115.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="492.0" y="126.0"></text>
</g>
<g>
<title>char[] (45 samples, 0.17%)</title><rect x="489.0" y="99.0" width="2.0" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="492.0" y="110.0"></text>
</g>
<g>
<title>java.lang.String (30 samples, 0.11%)</title><rect x="491.0" y="99.0" width="1.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="494.0" y="110.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (12 samples, 0.04%)</title><rect x="492.3" y="99.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="495.3" y="110.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (12 samples, 0.04%)</title><rect x="492.3" y="83.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="495.3" y="94.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (12 samples, 0.04%)</title><rect x="492.3" y="67.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="495.3" y="78.0"></text>
</g>
<g>
<title>byte[] (12 samples, 0.04%)</title><rect x="492.3" y="51.0" width="0.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="495.3" y="62.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (208 samples, 0.77%)</title><rect x="492.9" y="163.0" width="9.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="495.9" y="174.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (208 samples, 0.77%)</title><rect x="492.9" y="147.0" width="9.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="495.9" y="158.0"></text>
</g>
<g>
<title>byte[] (208 samples, 0.77%)</title><rect x="492.9" y="131.0" width="9.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="495.9" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (48 samples, 0.18%)</title><rect x="502.0" y="163.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="505.0" y="174.0"></text>
</g>
<g>
<title>java/lang/String.substring (48 samples, 0.18%)</title><rect x="502.0" y="147.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="505.0" y="158.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (48 samples, 0.18%)</title><rect x="502.0" y="131.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="505.0" y="142.0"></text>
</g>
<g>
<title>java.lang.String (12 samples, 0.04%)</title><rect x="502.0" y="115.0" width="0.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="505.0" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (36 samples, 0.13%)</title><rect x="502.5" y="115.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="505.5" y="126.0"></text>
</g>
<g>
<title>byte[] (36 samples, 0.13%)</title><rect x="502.5" y="99.0" width="1.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="505.5" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Replicas.analyseResponse (96 samples, 0.36%)</title><rect x="504.1" y="211.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="507.1" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Replicas.rememberFreshData (96 samples, 0.36%)</title><rect x="504.1" y="195.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="507.1" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dariagap/Timestamp.getTimestampByData (96 samples, 0.36%)</title><rect x="504.1" y="179.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="507.1" y="190.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (36 samples, 0.13%)</title><rect x="504.1" y="163.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="507.1" y="174.0"></text>
</g>
<g>
<title>java.lang.Long (36 samples, 0.13%)</title><rect x="504.1" y="147.0" width="1.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="507.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.byteBufferToBytes (60 samples, 0.22%)</title><rect x="505.7" y="163.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="508.7" y="174.0"></text>
</g>
<g>
<title>byte[] (60 samples, 0.22%)</title><rect x="505.7" y="147.0" width="2.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="508.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl.sendResponse (1,865 samples, 6.93%)</title><rect x="508.3" y="227.0" width="81.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="511.3" y="238.0">ru/mail/p..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,865 samples, 6.93%)</title><rect x="508.3" y="211.0" width="81.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="511.3" y="222.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,865 samples, 6.93%)</title><rect x="508.3" y="195.0" width="81.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="511.3" y="206.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1,408 samples, 5.23%)</title><rect x="508.3" y="179.0" width="61.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="511.3" y="190.0">one/ni..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1,408 samples, 5.23%)</title><rect x="508.3" y="163.0" width="61.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="511.3" y="174.0">one/ni..</text>
</g>
<g>
<title>byte[] (1,398 samples, 5.20%)</title><rect x="508.3" y="147.0" width="61.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="511.3" y="158.0">byte[]</text>
</g>
<g>
<title>byte[] (10 samples, 0.04%)</title><rect x="569.6" y="147.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="572.6" y="158.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (457 samples, 1.70%)</title><rect x="570.1" y="179.0" width="20.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="573.1" y="190.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (450 samples, 1.67%)</title><rect x="570.1" y="163.0" width="19.7" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="573.1" y="174.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (7 samples, 0.03%)</title><rect x="589.8" y="163.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="592.8" y="174.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (13,677 samples, 50.84%)</title><rect x="590.1" y="307.0" width="599.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="593.1" y="318.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (572 samples, 2.13%)</title><rect x="590.1" y="291.0" width="25.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="593.1" y="302.0">o..</text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (570 samples, 2.12%)</title><rect x="590.1" y="275.0" width="25.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="593.1" y="286.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.process (13,105 samples, 48.71%)</title><rect x="615.2" y="291.0" width="574.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="618.2" y="302.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (13,105 samples, 48.71%)</title><rect x="615.2" y="275.0" width="574.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="618.2" y="286.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (13,105 samples, 48.71%)</title><rect x="615.2" y="259.0" width="574.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="618.2" y="270.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,463 samples, 9.16%)</title><rect x="615.2" y="243.0" width="108.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="618.2" y="254.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,463 samples, 9.16%)</title><rect x="615.2" y="227.0" width="108.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="618.2" y="238.0">one/nio/http/..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,397 samples, 5.19%)</title><rect x="615.2" y="211.0" width="61.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="618.2" y="222.0">Reques..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1,001 samples, 3.72%)</title><rect x="615.2" y="195.0" width="43.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="618.2" y="206.0">one/..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1,001 samples, 3.72%)</title><rect x="615.2" y="179.0" width="43.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="618.2" y="190.0">one/..</text>
</g>
<g>
<title>java/lang/String.substring (1,001 samples, 3.72%)</title><rect x="615.2" y="163.0" width="43.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="618.2" y="174.0">java..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,001 samples, 3.72%)</title><rect x="615.2" y="147.0" width="43.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="618.2" y="158.0">java..</text>
</g>
<g>
<title>java.lang.String (530 samples, 1.97%)</title><rect x="615.2" y="131.0" width="23.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="618.2" y="142.0">j..</text>
</g>
<g>
<title>java.lang.String (11 samples, 0.04%)</title><rect x="638.4" y="131.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="641.4" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (460 samples, 1.71%)</title><rect x="638.9" y="131.0" width="20.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="641.9" y="142.0"></text>
</g>
<g>
<title>byte[] (449 samples, 1.67%)</title><rect x="638.9" y="115.0" width="19.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="641.9" y="126.0"></text>
</g>
<g>
<title>byte[] (11 samples, 0.04%)</title><rect x="658.6" y="115.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="661.6" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl.entity (396 samples, 1.47%)</title><rect x="659.1" y="195.0" width="17.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="662.1" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/652672882.linkToTargetMethod (396 samples, 1.47%)</title><rect x="659.1" y="179.0" width="17.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="662.1" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (396 samples, 1.47%)</title><rect x="659.1" y="163.0" width="17.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="662.1" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ClusterServiceImpl$$Lambda$65/1168571660.get$Lambda (396 samples, 1.47%)</title><rect x="659.1" y="147.0" width="17.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="662.1" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.service.dariagap.ClusterServiceImpl$$Lambda$65 (384 samples, 1.43%)</title><rect x="659.1" y="131.0" width="16.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="662.1" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.service.dariagap.ClusterServiceImpl$$Lambda$65 (12 samples, 0.04%)</title><rect x="675.9" y="131.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="678.9" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1,066 samples, 3.96%)</title><rect x="676.5" y="211.0" width="46.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="679.5" y="222.0">one/..</text>
</g>
<g>
<title>java/lang/String.substring (1,066 samples, 3.96%)</title><rect x="676.5" y="195.0" width="46.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="679.5" y="206.0">java..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,066 samples, 3.96%)</title><rect x="676.5" y="179.0" width="46.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="679.5" y="190.0">java..</text>
</g>
<g>
<title>java.lang.String (560 samples, 2.08%)</title><rect x="676.5" y="163.0" width="24.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="679.5" y="174.0">j..</text>
</g>
<g>
<title>java.lang.String (10 samples, 0.04%)</title><rect x="701.0" y="163.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="704.0" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (496 samples, 1.84%)</title><rect x="701.5" y="163.0" width="21.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="704.5" y="174.0">j..</text>
</g>
<g>
<title>byte[] (487 samples, 1.81%)</title><rect x="701.5" y="147.0" width="21.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="704.5" y="158.0">b..</text>
</g>
<g>
<title>byte[] (9 samples, 0.03%)</title><rect x="722.8" y="147.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="725.8" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5,951 samples, 22.12%)</title><rect x="723.2" y="243.0" width="261.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="726.2" y="254.0">one/nio/http/HttpSession.parseRequest</text>
</g>
<g>
<title>one.nio.http.Request (1,205 samples, 4.48%)</title><rect x="723.2" y="227.0" width="52.9" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="726.2" y="238.0">one.n..</text>
</g>
<g>
<title>one.nio.http.Request (9 samples, 0.03%)</title><rect x="776.1" y="227.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="779.1" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2,094 samples, 7.78%)</title><rect x="776.5" y="227.0" width="91.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="779.5" y="238.0">one/nio/htt..</text>
</g>
<g>
<title>java.lang.String[] (2,076 samples, 7.72%)</title><rect x="776.5" y="211.0" width="91.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="779.5" y="222.0">java.lang.S..</text>
</g>
<g>
<title>java.lang.String[] (18 samples, 0.07%)</title><rect x="867.5" y="211.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="870.5" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,643 samples, 9.82%)</title><rect x="868.3" y="227.0" width="115.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="871.3" y="238.0">one/nio/util/U..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,643 samples, 9.82%)</title><rect x="868.3" y="211.0" width="115.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="871.3" y="222.0">one/nio/util/U..</text>
</g>
<g>
<title>char[] (1,632 samples, 6.07%)</title><rect x="868.3" y="195.0" width="71.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="871.3" y="206.0">char[]</text>
</g>
<g>
<title>char[] (14 samples, 0.05%)</title><rect x="939.9" y="195.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="942.9" y="206.0"></text>
</g>
<g>
<title>java.lang.String (364 samples, 1.35%)</title><rect x="940.5" y="195.0" width="16.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="943.5" y="206.0"></text>
</g>
<g>
<title>java.lang.String (9 samples, 0.03%)</title><rect x="956.5" y="195.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="959.5" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (624 samples, 2.32%)</title><rect x="956.9" y="195.0" width="27.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="959.9" y="206.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (624 samples, 2.32%)</title><rect x="956.9" y="179.0" width="27.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="959.9" y="190.0">j..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (624 samples, 2.32%)</title><rect x="956.9" y="163.0" width="27.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="959.9" y="174.0">j..</text>
</g>
<g>
<title>byte[] (614 samples, 2.28%)</title><rect x="956.9" y="147.0" width="26.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="959.9" y="158.0">b..</text>
</g>
<g>
<title>byte[] (10 samples, 0.04%)</title><rect x="983.8" y="147.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="986.8" y="158.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,691 samples, 17.44%)</title><rect x="984.2" y="243.0" width="205.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="987.2" y="254.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,691 samples, 17.44%)</title><rect x="984.2" y="227.0" width="205.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="987.2" y="238.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>char[] (2,762 samples, 10.27%)</title><rect x="984.2" y="211.0" width="121.2" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="987.2" y="222.0">char[]</text>
</g>
<g>
<title>char[] (26 samples, 0.10%)</title><rect x="1105.4" y="211.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1108.4" y="222.0"></text>
</g>
<g>
<title>java.lang.String (890 samples, 3.31%)</title><rect x="1106.5" y="211.0" width="39.1" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1109.5" y="222.0">jav..</text>
</g>
<g>
<title>java.lang.String (12 samples, 0.04%)</title><rect x="1145.6" y="211.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1148.6" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,001 samples, 3.72%)</title><rect x="1146.1" y="211.0" width="43.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1149.1" y="222.0">java..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,001 samples, 3.72%)</title><rect x="1146.1" y="195.0" width="43.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1149.1" y="206.0">java..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,001 samples, 3.72%)</title><rect x="1146.1" y="179.0" width="43.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1149.1" y="190.0">java..</text>
</g>
<g>
<title>byte[] (990 samples, 3.68%)</title><rect x="1146.1" y="163.0" width="43.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1149.1" y="174.0">byte[]</text>
</g>
<g>
<title>byte[] (11 samples, 0.04%)</title><rect x="1189.5" y="163.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1192.5" y="174.0"></text>
</g>
</g>
</svg>
