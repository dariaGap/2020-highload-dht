<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (381 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.52%)</title><rect x="10.0" y="915.0" width="6.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1 samples, 0.26%)</title><rect x="10.0" y="899.0" width="3.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1 samples, 0.26%)</title><rect x="10.0" y="883.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.26%)</title><rect x="10.0" y="867.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.26%)</title><rect x="10.0" y="851.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.26%)</title><rect x="10.0" y="835.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1 samples, 0.26%)</title><rect x="10.0" y="819.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (1 samples, 0.26%)</title><rect x="10.0" y="803.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.26%)</title><rect x="10.0" y="787.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1 samples, 0.26%)</title><rect x="10.0" y="771.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.26%)</title><rect x="10.0" y="755.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.26%)</title><rect x="10.0" y="739.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (1 samples, 0.26%)</title><rect x="10.0" y="723.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.26%)</title><rect x="10.0" y="707.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.26%)</title><rect x="10.0" y="691.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni15702928521170118180.so (1 samples, 0.26%)</title><rect x="10.0" y="675.0" width="3.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.26%)</title><rect x="10.0" y="659.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.26%)</title><rect x="10.0" y="643.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>JNIEnv_::CallStaticIntMethod(_jclass*, _jmethodID*, ...) (1 samples, 0.26%)</title><rect x="10.0" y="627.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>jni_CallStaticIntMethodV (1 samples, 0.26%)</title><rect x="10.0" y="611.0" width="3.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .isra.0] [clone .constprop.0] (1 samples, 0.26%)</title><rect x="10.0" y="595.0" width="3.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.26%)</title><rect x="10.0" y="579.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.26%)</title><rect x="10.0" y="563.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.26%)</title><rect x="13.1" y="899.0" width="3.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="16.1" y="910.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.52%)</title><rect x="16.2" y="915.0" width="6.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="19.2" y="926.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (2 samples, 0.52%)</title><rect x="16.2" y="899.0" width="6.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="19.2" y="910.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (2 samples, 0.52%)</title><rect x="16.2" y="883.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="19.2" y="894.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.52%)</title><rect x="16.2" y="867.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="19.2" y="878.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.52%)</title><rect x="16.2" y="851.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="19.2" y="862.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.52%)</title><rect x="16.2" y="835.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="19.2" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2 samples, 0.52%)</title><rect x="16.2" y="819.0" width="6.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="19.2" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (2 samples, 0.52%)</title><rect x="16.2" y="803.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="19.2" y="814.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (2 samples, 0.52%)</title><rect x="16.2" y="787.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="19.2" y="798.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (2 samples, 0.52%)</title><rect x="16.2" y="771.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="19.2" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.52%)</title><rect x="16.2" y="755.0" width="6.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="19.2" y="766.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.52%)</title><rect x="16.2" y="739.0" width="6.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="19.2" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (2 samples, 0.52%)</title><rect x="16.2" y="723.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="19.2" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.52%)</title><rect x="16.2" y="707.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="19.2" y="718.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (2 samples, 0.52%)</title><rect x="16.2" y="691.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="19.2" y="702.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni15702928521170118180.so (2 samples, 0.52%)</title><rect x="16.2" y="675.0" width="6.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="19.2" y="686.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni15702928521170118180.so (1 samples, 0.26%)</title><rect x="16.2" y="659.0" width="3.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="19.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.26%)</title><rect x="16.2" y="643.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="19.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.26%)</title><rect x="16.2" y="627.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="19.2" y="638.0"></text>
</g>
<g>
<title>JNIEnv_::CallStaticIntMethod(_jclass*, _jmethodID*, ...) (1 samples, 0.26%)</title><rect x="16.2" y="611.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="19.2" y="622.0"></text>
</g>
<g>
<title>jni_CallStaticIntMethodV (1 samples, 0.26%)</title><rect x="16.2" y="595.0" width="3.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="19.2" y="606.0"></text>
</g>
<g>
<title>jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .isra.0] [clone .constprop.0] (1 samples, 0.26%)</title><rect x="16.2" y="579.0" width="3.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="19.2" y="590.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.26%)</title><rect x="16.2" y="563.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="19.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.26%)</title><rect x="19.3" y="659.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="22.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.26%)</title><rect x="19.3" y="643.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="22.3" y="654.0"></text>
</g>
<g>
<title>JNIEnv_::CallStaticIntMethod(_jclass*, _jmethodID*, ...) (1 samples, 0.26%)</title><rect x="19.3" y="627.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="22.3" y="638.0"></text>
</g>
<g>
<title>jni_CallStaticIntMethodV (1 samples, 0.26%)</title><rect x="19.3" y="611.0" width="3.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="22.3" y="622.0"></text>
</g>
<g>
<title>jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .isra.0] [clone .constprop.0] (1 samples, 0.26%)</title><rect x="19.3" y="595.0" width="3.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="22.3" y="606.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.26%)</title><rect x="19.3" y="579.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="22.3" y="590.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (377 samples, 98.95%)</title><rect x="22.4" y="915.0" width="1167.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.4" y="926.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.26%)</title><rect x="25.5" y="899.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="28.5" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (12 samples, 3.15%)</title><rect x="28.6" y="899.0" width="37.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.6" y="910.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (10 samples, 2.62%)</title><rect x="34.8" y="883.0" width="30.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="37.8" y="894.0">on..</text>
</g>
<g>
<title>clock_gettime@plt (1 samples, 0.26%)</title><rect x="37.9" y="867.0" width="3.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="40.9" y="878.0"></text>
</g>
<g>
<title>epoll_wait (8 samples, 2.10%)</title><rect x="41.0" y="867.0" width="24.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="44.0" y="878.0">e..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (7 samples, 1.84%)</title><rect x="44.1" y="851.0" width="21.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="47.1" y="862.0">e..</text>
</g>
<g>
<title>do_syscall_64 (7 samples, 1.84%)</title><rect x="44.1" y="835.0" width="21.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="47.1" y="846.0">d..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (7 samples, 1.84%)</title><rect x="44.1" y="819.0" width="21.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="47.1" y="830.0">_..</text>
</g>
<g>
<title>do_epoll_wait (7 samples, 1.84%)</title><rect x="44.1" y="803.0" width="21.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="47.1" y="814.0">d..</text>
</g>
<g>
<title>ep_poll (7 samples, 1.84%)</title><rect x="44.1" y="787.0" width="21.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="47.1" y="798.0">e..</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (5 samples, 1.31%)</title><rect x="44.1" y="771.0" width="15.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="47.1" y="782.0"></text>
</g>
<g>
<title>ep_send_events_proc (4 samples, 1.05%)</title><rect x="47.2" y="755.0" width="12.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="50.2" y="766.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (2 samples, 0.52%)</title><rect x="53.4" y="739.0" width="6.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="56.4" y="750.0"></text>
</g>
<g>
<title>sock_poll (2 samples, 0.52%)</title><rect x="53.4" y="723.0" width="6.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="56.4" y="734.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.26%)</title><rect x="56.5" y="707.0" width="3.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="59.5" y="718.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (2 samples, 0.52%)</title><rect x="59.6" y="771.0" width="6.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="62.6" y="782.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (2 samples, 0.52%)</title><rect x="59.6" y="755.0" width="6.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="62.6" y="766.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.52%)</title><rect x="59.6" y="739.0" width="6.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="62.6" y="750.0"></text>
</g>
<g>
<title>__schedule (2 samples, 0.52%)</title><rect x="59.6" y="723.0" width="6.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="62.6" y="734.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.52%)</title><rect x="59.6" y="707.0" width="6.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="62.6" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (362 samples, 95.01%)</title><rect x="65.7" y="899.0" width="1121.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="68.7" y="910.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (362 samples, 95.01%)</title><rect x="65.7" y="883.0" width="1121.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="68.7" y="894.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (350 samples, 91.86%)</title><rect x="65.7" y="867.0" width="1084.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="68.7" y="878.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (339 samples, 88.98%)</title><rect x="71.9" y="851.0" width="1050.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="74.9" y="862.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (339 samples, 88.98%)</title><rect x="71.9" y="835.0" width="1050.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="74.9" y="846.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (7 samples, 1.84%)</title><rect x="71.9" y="819.0" width="21.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.9" y="830.0">R..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.52%)</title><rect x="71.9" y="803.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="74.9" y="814.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.52%)</title><rect x="71.9" y="787.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.9" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.52%)</title><rect x="71.9" y="771.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="74.9" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.52%)</title><rect x="71.9" y="755.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="74.9" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.52%)</title><rect x="71.9" y="739.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.9" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.26%)</title><rect x="75.0" y="723.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.0" y="734.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.26%)</title><rect x="75.0" y="707.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="78.0" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (3 samples, 0.79%)</title><rect x="78.1" y="803.0" width="9.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="81.1" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.26%)</title><rect x="81.2" y="787.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="84.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.26%)</title><rect x="81.2" y="771.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="84.2" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dariagap/RocksDBStorage.upsert (1 samples, 0.26%)</title><rect x="84.3" y="787.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="87.3" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ServiceImpl.get (2 samples, 0.52%)</title><rect x="87.4" y="803.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="90.4" y="814.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.52%)</title><rect x="87.4" y="787.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="90.4" y="798.0"></text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (330 samples, 86.61%)</title><rect x="93.6" y="819.0" width="1022.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.6" y="830.0">RequestHandler1_put.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (126 samples, 33.07%)</title><rect x="93.6" y="803.0" width="390.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.6" y="814.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (126 samples, 33.07%)</title><rect x="93.6" y="787.0" width="390.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="96.6" y="798.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.26%)</title><rect x="93.6" y="771.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.6" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.26%)</title><rect x="93.6" y="755.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.6" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.26%)</title><rect x="93.6" y="739.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="96.6" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.26%)</title><rect x="93.6" y="723.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.6" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (125 samples, 32.81%)</title><rect x="96.7" y="771.0" width="387.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="99.7" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (125 samples, 32.81%)</title><rect x="96.7" y="755.0" width="387.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="99.7" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (125 samples, 32.81%)</title><rect x="96.7" y="739.0" width="387.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="99.7" y="750.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (125 samples, 32.81%)</title><rect x="96.7" y="723.0" width="387.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="99.7" y="734.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>send (122 samples, 32.02%)</title><rect x="106.0" y="707.0" width="377.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="109.0" y="718.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (121 samples, 31.76%)</title><rect x="109.1" y="691.0" width="374.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="112.1" y="702.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>do_syscall_64 (121 samples, 31.76%)</title><rect x="109.1" y="675.0" width="374.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="112.1" y="686.0">do_syscall_64</text>
</g>
<g>
<title>__sys_sendto (1 samples, 0.26%)</title><rect x="118.4" y="659.0" width="3.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="121.4" y="670.0"></text>
</g>
<g>
<title>__x64_sys_sendto (72 samples, 18.90%)</title><rect x="121.5" y="659.0" width="223.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="124.5" y="670.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (71 samples, 18.64%)</title><rect x="121.5" y="643.0" width="219.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="124.5" y="654.0">__sys_sendto</text>
</g>
<g>
<title>__fdget (1 samples, 0.26%)</title><rect x="124.6" y="627.0" width="3.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="127.6" y="638.0"></text>
</g>
<g>
<title>inet6_sendmsg (1 samples, 0.26%)</title><rect x="127.7" y="627.0" width="3.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="130.7" y="638.0"></text>
</g>
<g>
<title>sock_sendmsg (68 samples, 17.85%)</title><rect x="130.8" y="627.0" width="210.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="133.8" y="638.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (68 samples, 17.85%)</title><rect x="130.8" y="611.0" width="210.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="133.8" y="622.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (68 samples, 17.85%)</title><rect x="130.8" y="595.0" width="210.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="133.8" y="606.0">tcp_sendmsg</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.26%)</title><rect x="133.9" y="579.0" width="3.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="136.9" y="590.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.26%)</title><rect x="137.0" y="579.0" width="3.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="140.0" y="590.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.26%)</title><rect x="137.0" y="563.0" width="3.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="140.0" y="574.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (64 samples, 16.80%)</title><rect x="140.1" y="579.0" width="198.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="143.1" y="590.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>sk_page_frag_refill (1 samples, 0.26%)</title><rect x="152.5" y="563.0" width="3.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="155.5" y="574.0"></text>
</g>
<g>
<title>skb_page_frag_refill (1 samples, 0.26%)</title><rect x="152.5" y="547.0" width="3.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="155.5" y="558.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (3 samples, 0.79%)</title><rect x="155.6" y="563.0" width="9.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="158.6" y="574.0"></text>
</g>
<g>
<title>__alloc_skb (3 samples, 0.79%)</title><rect x="155.6" y="547.0" width="9.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="158.6" y="558.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (2 samples, 0.52%)</title><rect x="155.6" y="531.0" width="6.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="158.6" y="542.0"></text>
</g>
<g>
<title>memset (2 samples, 0.52%)</title><rect x="155.6" y="515.0" width="6.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="158.6" y="526.0"></text>
</g>
<g>
<title>ksize (1 samples, 0.26%)</title><rect x="161.8" y="531.0" width="3.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="164.8" y="542.0"></text>
</g>
<g>
<title>__ksize (1 samples, 0.26%)</title><rect x="161.8" y="515.0" width="3.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="164.8" y="526.0"></text>
</g>
<g>
<title>tcp_push (56 samples, 14.70%)</title><rect x="164.9" y="563.0" width="173.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="167.9" y="574.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (56 samples, 14.70%)</title><rect x="164.9" y="547.0" width="173.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="167.9" y="558.0">__tcp_push_pending_fra..</text>
</g>
<g>
<title>tcp_write_xmit (56 samples, 14.70%)</title><rect x="164.9" y="531.0" width="173.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="167.9" y="542.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (50 samples, 13.12%)</title><rect x="168.0" y="515.0" width="154.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="171.0" y="526.0">__tcp_transmit_skb</text>
</g>
<g>
<title>ip_queue_xmit (49 samples, 12.86%)</title><rect x="171.0" y="499.0" width="151.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="174.0" y="510.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (49 samples, 12.86%)</title><rect x="171.0" y="483.0" width="151.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="174.0" y="494.0">__ip_queue_xmit</text>
</g>
<g>
<title>ip_local_out (49 samples, 12.86%)</title><rect x="171.0" y="467.0" width="151.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="174.0" y="478.0">ip_local_out</text>
</g>
<g>
<title>ip_output (49 samples, 12.86%)</title><rect x="171.0" y="451.0" width="151.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="174.0" y="462.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (49 samples, 12.86%)</title><rect x="171.0" y="435.0" width="151.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="174.0" y="446.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (3 samples, 0.79%)</title><rect x="171.0" y="419.0" width="9.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="174.0" y="430.0"></text>
</g>
<g>
<title>__ip_finish_output (46 samples, 12.07%)</title><rect x="180.3" y="419.0" width="142.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="183.3" y="430.0">__ip_finish_output</text>
</g>
<g>
<title>ip_finish_output2 (45 samples, 11.81%)</title><rect x="183.4" y="403.0" width="139.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="186.4" y="414.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (39 samples, 10.24%)</title><rect x="189.6" y="387.0" width="120.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="192.6" y="398.0">__local_bh_enab..</text>
</g>
<g>
<title>do_softirq.part.0 (39 samples, 10.24%)</title><rect x="189.6" y="371.0" width="120.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="192.6" y="382.0">do_softirq.part.0</text>
</g>
<g>
<title>do_softirq_own_stack (39 samples, 10.24%)</title><rect x="189.6" y="355.0" width="120.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="192.6" y="366.0">do_softirq_own_..</text>
</g>
<g>
<title>__softirqentry_text_start (39 samples, 10.24%)</title><rect x="189.6" y="339.0" width="120.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="192.6" y="350.0">__softirqentry_..</text>
</g>
<g>
<title>net_rx_action (37 samples, 9.71%)</title><rect x="189.6" y="323.0" width="114.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="192.6" y="334.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (37 samples, 9.71%)</title><rect x="189.6" y="307.0" width="114.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="192.6" y="318.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (35 samples, 9.19%)</title><rect x="195.8" y="291.0" width="108.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="198.8" y="302.0">__netif_recei..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (35 samples, 9.19%)</title><rect x="195.8" y="275.0" width="108.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="198.8" y="286.0">__netif_recei..</text>
</g>
<g>
<title>ip_rcv (35 samples, 9.19%)</title><rect x="195.8" y="259.0" width="108.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="198.8" y="270.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (34 samples, 8.92%)</title><rect x="198.9" y="243.0" width="105.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="201.9" y="254.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (33 samples, 8.66%)</title><rect x="202.0" y="227.0" width="102.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="205.0" y="238.0">ip_local_del..</text>
</g>
<g>
<title>ip_local_deliver_finish (33 samples, 8.66%)</title><rect x="202.0" y="211.0" width="102.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="205.0" y="222.0">ip_local_del..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (32 samples, 8.40%)</title><rect x="202.0" y="195.0" width="99.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="205.0" y="206.0">ip_protocol_..</text>
</g>
<g>
<title>tcp_v4_rcv (32 samples, 8.40%)</title><rect x="202.0" y="179.0" width="99.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="205.0" y="190.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (2 samples, 0.52%)</title><rect x="202.0" y="163.0" width="6.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="205.0" y="174.0"></text>
</g>
<g>
<title>inet_ehashfn (1 samples, 0.26%)</title><rect x="205.1" y="147.0" width="3.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="208.1" y="158.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (30 samples, 7.87%)</title><rect x="208.2" y="163.0" width="92.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="211.2" y="174.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>tcp_rcv_established (30 samples, 7.87%)</title><rect x="208.2" y="147.0" width="92.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="211.2" y="158.0">tcp_rcv_est..</text>
</g>
<g>
<title>__tcp_ack_snd_check (2 samples, 0.52%)</title><rect x="217.5" y="131.0" width="6.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="220.5" y="142.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (1 samples, 0.26%)</title><rect x="220.6" y="115.0" width="3.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="223.6" y="126.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.26%)</title><rect x="220.6" y="99.0" width="3.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="223.6" y="110.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (1 samples, 0.26%)</title><rect x="223.7" y="131.0" width="3.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="226.7" y="142.0"></text>
</g>
<g>
<title>sock_def_readable (1 samples, 0.26%)</title><rect x="226.8" y="131.0" width="3.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="229.8" y="142.0"></text>
</g>
<g>
<title>tcp_ack (8 samples, 2.10%)</title><rect x="229.9" y="131.0" width="24.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="232.9" y="142.0">t..</text>
</g>
<g>
<title>tcp_clean_rtx_queue (6 samples, 1.57%)</title><rect x="236.1" y="115.0" width="18.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="239.1" y="126.0"></text>
</g>
<g>
<title>__kfree_skb (2 samples, 0.52%)</title><rect x="248.5" y="99.0" width="6.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="251.5" y="110.0"></text>
</g>
<g>
<title>skb_release_all (2 samples, 0.52%)</title><rect x="248.5" y="83.0" width="6.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="251.5" y="94.0"></text>
</g>
<g>
<title>skb_release_data (2 samples, 0.52%)</title><rect x="248.5" y="67.0" width="6.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="251.5" y="78.0"></text>
</g>
<g>
<title>skb_free_head (1 samples, 0.26%)</title><rect x="251.6" y="51.0" width="3.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="254.6" y="62.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.26%)</title><rect x="251.6" y="35.0" width="3.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="254.6" y="46.0"></text>
</g>
<g>
<title>tcp_data_ready (14 samples, 3.67%)</title><rect x="254.7" y="131.0" width="43.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="257.7" y="142.0">tcp_..</text>
</g>
<g>
<title>sock_def_readable (13 samples, 3.41%)</title><rect x="257.8" y="115.0" width="40.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="260.8" y="126.0">soc..</text>
</g>
<g>
<title>__wake_up_sync_key (13 samples, 3.41%)</title><rect x="257.8" y="99.0" width="40.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="260.8" y="110.0">__w..</text>
</g>
<g>
<title>__wake_up_common_lock (13 samples, 3.41%)</title><rect x="257.8" y="83.0" width="40.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="260.8" y="94.0">__w..</text>
</g>
<g>
<title>__lock_text_start (13 samples, 3.41%)</title><rect x="257.8" y="67.0" width="40.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="260.8" y="78.0">__l..</text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (1 samples, 0.26%)</title><rect x="298.0" y="131.0" width="3.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="301.0" y="142.0"></text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.26%)</title><rect x="301.1" y="195.0" width="3.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="304.1" y="206.0"></text>
</g>
<g>
<title>process_backlog (2 samples, 0.52%)</title><rect x="304.2" y="323.0" width="6.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="307.2" y="334.0"></text>
</g>
<g>
<title>dev_queue_xmit (4 samples, 1.05%)</title><rect x="310.4" y="387.0" width="12.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="313.4" y="398.0"></text>
</g>
<g>
<title>__dev_queue_xmit (4 samples, 1.05%)</title><rect x="310.4" y="371.0" width="12.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="313.4" y="382.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (3 samples, 0.79%)</title><rect x="310.4" y="355.0" width="9.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="313.4" y="366.0"></text>
</g>
<g>
<title>loopback_xmit (3 samples, 0.79%)</title><rect x="310.4" y="339.0" width="9.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="313.4" y="350.0"></text>
</g>
<g>
<title>netif_rx_internal (1 samples, 0.26%)</title><rect x="316.6" y="323.0" width="3.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="319.6" y="334.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.26%)</title><rect x="319.7" y="355.0" width="3.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="322.7" y="366.0"></text>
</g>
<g>
<title>ip_queue_xmit (1 samples, 0.26%)</title><rect x="322.8" y="515.0" width="3.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="325.8" y="526.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.26%)</title><rect x="325.9" y="515.0" width="3.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="328.9" y="526.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (2 samples, 0.52%)</title><rect x="329.0" y="515.0" width="6.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="332.0" y="526.0"></text>
</g>
<g>
<title>rb_insert_color (1 samples, 0.26%)</title><rect x="329.0" y="499.0" width="3.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="332.0" y="510.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.26%)</title><rect x="332.1" y="499.0" width="3.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="335.1" y="510.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (1 samples, 0.26%)</title><rect x="335.2" y="515.0" width="3.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="338.2" y="526.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (1 samples, 0.26%)</title><rect x="338.3" y="579.0" width="3.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="341.3" y="590.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.26%)</title><rect x="341.4" y="643.0" width="3.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="344.4" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (45 samples, 11.81%)</title><rect x="344.5" y="659.0" width="139.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="347.5" y="670.0">exit_to_usermode_..</text>
</g>
<g>
<title>schedule (43 samples, 11.29%)</title><rect x="350.7" y="643.0" width="133.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="353.7" y="654.0">schedule</text>
</g>
<g>
<title>__schedule (43 samples, 11.29%)</title><rect x="350.7" y="627.0" width="133.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="353.7" y="638.0">__schedule</text>
</g>
<g>
<title>finish_task_switch (41 samples, 10.76%)</title><rect x="356.9" y="611.0" width="127.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="359.9" y="622.0">finish_task_switch</text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ServiceImpl.put (204 samples, 53.54%)</title><rect x="483.9" y="803.0" width="631.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="486.9" y="814.0">ru/mail/polis/service/dariagap/ServiceImpl.put</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.52%)</title><rect x="483.9" y="787.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="486.9" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.52%)</title><rect x="483.9" y="771.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="486.9" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.52%)</title><rect x="483.9" y="755.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="486.9" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.52%)</title><rect x="483.9" y="739.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="486.9" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.26%)</title><rect x="487.0" y="723.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="490.0" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.26%)</title><rect x="487.0" y="707.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="490.0" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.26%)</title><rect x="487.0" y="691.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="490.0" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.26%)</title><rect x="487.0" y="675.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="490.0" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.26%)</title><rect x="490.1" y="787.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="493.1" y="798.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.26%)</title><rect x="490.1" y="771.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="493.1" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dariagap/RocksDBStorage.upsert (201 samples, 52.76%)</title><rect x="493.1" y="787.0" width="622.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="496.1" y="798.0">ru/mail/polis/dao/dariagap/RocksDBStorage.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (198 samples, 51.97%)</title><rect x="493.1" y="771.0" width="613.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="496.1" y="782.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (198 samples, 51.97%)</title><rect x="493.1" y="755.0" width="613.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="496.1" y="766.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.26%)</title><rect x="496.2" y="739.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="499.2" y="750.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (185 samples, 48.56%)</title><rect x="499.3" y="739.0" width="573.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="502.3" y="750.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>operator delete[](void*) [clone .plt] (1 samples, 0.26%)</title><rect x="508.6" y="723.0" width="3.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="511.6" y="734.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.52%)</title><rect x="511.7" y="723.0" width="6.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="514.7" y="734.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.52%)</title><rect x="517.9" y="723.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="520.9" y="734.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (177 samples, 46.46%)</title><rect x="524.1" y="723.0" width="548.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="527.1" y="734.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, roc..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097844ul, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.26%)</title><rect x="524.1" y="707.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="527.1" y="718.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.52%)</title><rect x="527.2" y="707.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="530.2" y="718.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.26%)</title><rect x="533.4" y="707.0" width="3.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="536.4" y="718.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (173 samples, 45.41%)</title><rect x="536.5" y="707.0" width="535.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="539.5" y="718.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rock..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.26%)</title><rect x="542.7" y="691.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="545.7" y="702.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (170 samples, 44.62%)</title><rect x="545.8" y="691.0" width="526.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="548.8" y="702.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyH..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (169 samples, 44.36%)</title><rect x="545.8" y="675.0" width="523.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="548.8" y="686.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHand..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (162 samples, 42.52%)</title><rect x="545.8" y="659.0" width="501.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="548.8" y="670.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBa..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context [clone .plt] (1 samples, 0.26%)</title><rect x="545.8" y="643.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="548.8" y="654.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.26%)</title><rect x="548.9" y="643.0" width="3.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="551.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) [clone .plt] (1 samples, 0.26%)</title><rect x="552.0" y="643.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="555.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() (1 samples, 0.26%)</title><rect x="555.1" y="643.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="558.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (154 samples, 40.42%)</title><rect x="558.2" y="643.0" width="476.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="561.2" y="654.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::..</text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.52%)</title><rect x="570.6" y="627.0" width="6.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="573.6" y="638.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.26%)</title><rect x="576.8" y="627.0" width="3.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="579.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (4 samples, 1.05%)</title><rect x="579.9" y="627.0" width="12.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="582.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() (2 samples, 0.52%)</title><rect x="592.3" y="627.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="595.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::Clean() (2 samples, 0.52%)</title><rect x="592.3" y="611.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="595.3" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (54 samples, 14.17%)</title><rect x="598.5" y="627.0" width="167.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="601.5" y="638.0">rocksdb::DBImpl::Writ..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (54 samples, 14.17%)</title><rect x="598.5" y="611.0" width="167.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="601.5" y="622.0">rocksdb::DBImpl::Writ..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() [clone .plt] (1 samples, 0.26%)</title><rect x="601.5" y="595.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="604.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (52 samples, 13.65%)</title><rect x="604.6" y="595.0" width="161.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="607.6" y="606.0">rocksdb::log::Writer:..</text>
</g>
<g>
<title>/tmp/librocksdbjni15702928521170118180.so (4 samples, 1.05%)</title><rect x="604.6" y="579.0" width="12.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="607.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (45 samples, 11.81%)</title><rect x="617.0" y="579.0" width="139.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="620.0" y="590.0">rocksdb::Writable..</text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.52%)</title><rect x="617.0" y="563.0" width="6.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="620.0" y="574.0"></text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) [clone .plt] (1 samples, 0.26%)</title><rect x="623.2" y="563.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="626.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (42 samples, 11.02%)</title><rect x="626.3" y="563.0" width="130.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="629.3" y="574.0">rocksdb::Writabl..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.26%)</title><rect x="629.4" y="547.0" width="3.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="632.4" y="558.0"></text>
</g>
<g>
<title>__write (40 samples, 10.50%)</title><rect x="632.5" y="547.0" width="123.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="635.5" y="558.0">__write</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (39 samples, 10.24%)</title><rect x="635.6" y="531.0" width="120.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="638.6" y="542.0">entry_SYSCALL_6..</text>
</g>
<g>
<title>__x64_sys_write (1 samples, 0.26%)</title><rect x="635.6" y="515.0" width="3.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="638.6" y="526.0"></text>
</g>
<g>
<title>do_syscall_64 (38 samples, 9.97%)</title><rect x="638.7" y="515.0" width="117.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="641.7" y="526.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_write (36 samples, 9.45%)</title><rect x="641.8" y="499.0" width="111.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="644.8" y="510.0">__x64_sys_write</text>
</g>
<g>
<title>ksys_write (36 samples, 9.45%)</title><rect x="641.8" y="483.0" width="111.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="644.8" y="494.0">ksys_write</text>
</g>
<g>
<title>__fdget_pos (1 samples, 0.26%)</title><rect x="641.8" y="467.0" width="3.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="644.8" y="478.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.26%)</title><rect x="641.8" y="451.0" width="3.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="644.8" y="462.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.26%)</title><rect x="641.8" y="435.0" width="3.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="644.8" y="446.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.26%)</title><rect x="644.9" y="467.0" width="3.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="647.9" y="478.0"></text>
</g>
<g>
<title>vfs_write (34 samples, 8.92%)</title><rect x="648.0" y="467.0" width="105.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="651.0" y="478.0">vfs_write</text>
</g>
<g>
<title>__sb_start_write (4 samples, 1.05%)</title><rect x="651.1" y="451.0" width="12.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="654.1" y="462.0"></text>
</g>
<g>
<title>__vfs_write (29 samples, 7.61%)</title><rect x="663.5" y="451.0" width="89.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="666.5" y="462.0">__vfs_write</text>
</g>
<g>
<title>new_sync_write (29 samples, 7.61%)</title><rect x="663.5" y="435.0" width="89.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="666.5" y="446.0">new_sync_w..</text>
</g>
<g>
<title>ext4_file_write_iter (29 samples, 7.61%)</title><rect x="663.5" y="419.0" width="89.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="666.5" y="430.0">ext4_file_..</text>
</g>
<g>
<title>__generic_file_write_iter (24 samples, 6.30%)</title><rect x="666.6" y="403.0" width="74.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="669.6" y="414.0">__generi..</text>
</g>
<g>
<title>__x86_indirect_thunk_r11 (1 samples, 0.26%)</title><rect x="669.7" y="387.0" width="3.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="672.7" y="398.0"></text>
</g>
<g>
<title>file_remove_privs (1 samples, 0.26%)</title><rect x="672.8" y="387.0" width="3.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="675.8" y="398.0"></text>
</g>
<g>
<title>generic_perform_write (20 samples, 5.25%)</title><rect x="675.9" y="387.0" width="61.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="678.9" y="398.0">generi..</text>
</g>
<g>
<title>ext4_da_write_begin (7 samples, 1.84%)</title><rect x="675.9" y="371.0" width="21.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="678.9" y="382.0">e..</text>
</g>
<g>
<title>__ext4_journal_start_sb (3 samples, 0.79%)</title><rect x="679.0" y="355.0" width="9.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="682.0" y="366.0"></text>
</g>
<g>
<title>jbd2__journal_start (3 samples, 0.79%)</title><rect x="679.0" y="339.0" width="9.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="682.0" y="350.0"></text>
</g>
<g>
<title>kmem_cache_alloc (1 samples, 0.26%)</title><rect x="679.0" y="323.0" width="3.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="682.0" y="334.0"></text>
</g>
<g>
<title>start_this_handle (2 samples, 0.52%)</title><rect x="682.1" y="323.0" width="6.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="685.1" y="334.0"></text>
</g>
<g>
<title>add_transaction_credits (1 samples, 0.26%)</title><rect x="685.2" y="307.0" width="3.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="688.2" y="318.0"></text>
</g>
<g>
<title>ext4_block_write_begin (1 samples, 0.26%)</title><rect x="688.3" y="355.0" width="3.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="691.3" y="366.0"></text>
</g>
<g>
<title>ext4_da_get_block_prep (1 samples, 0.26%)</title><rect x="688.3" y="339.0" width="3.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="691.3" y="350.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (2 samples, 0.52%)</title><rect x="691.4" y="355.0" width="6.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="694.4" y="366.0"></text>
</g>
<g>
<title>find_get_entry (1 samples, 0.26%)</title><rect x="691.4" y="339.0" width="3.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="694.4" y="350.0"></text>
</g>
<g>
<title>pagecache_get_page (1 samples, 0.26%)</title><rect x="694.5" y="339.0" width="3.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="697.5" y="350.0"></text>
</g>
<g>
<title>find_get_entry (1 samples, 0.26%)</title><rect x="694.5" y="323.0" width="3.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="697.5" y="334.0"></text>
</g>
<g>
<title>xas_load (1 samples, 0.26%)</title><rect x="694.5" y="307.0" width="3.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="697.5" y="318.0"></text>
</g>
<g>
<title>ext4_da_write_end (12 samples, 3.15%)</title><rect x="697.6" y="371.0" width="37.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="700.6" y="382.0">ext..</text>
</g>
<g>
<title>__ext4_journal_stop (2 samples, 0.52%)</title><rect x="700.7" y="355.0" width="6.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="703.7" y="366.0"></text>
</g>
<g>
<title>jbd2_journal_stop (2 samples, 0.52%)</title><rect x="700.7" y="339.0" width="6.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="703.7" y="350.0"></text>
</g>
<g>
<title>__wake_up (1 samples, 0.26%)</title><rect x="703.8" y="323.0" width="3.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="706.8" y="334.0"></text>
</g>
<g>
<title>__wake_up_common_lock (1 samples, 0.26%)</title><rect x="703.8" y="307.0" width="3.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="706.8" y="318.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.26%)</title><rect x="703.8" y="291.0" width="3.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="706.8" y="302.0"></text>
</g>
<g>
<title>__mark_inode_dirty (1 samples, 0.26%)</title><rect x="706.9" y="355.0" width="3.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="709.9" y="366.0"></text>
</g>
<g>
<title>generic_write_end (8 samples, 2.10%)</title><rect x="709.9" y="355.0" width="24.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="712.9" y="366.0">g..</text>
</g>
<g>
<title>__mark_inode_dirty (6 samples, 1.57%)</title><rect x="716.1" y="339.0" width="18.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="719.1" y="350.0"></text>
</g>
<g>
<title>ext4_dirty_inode (6 samples, 1.57%)</title><rect x="716.1" y="323.0" width="18.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="719.1" y="334.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (6 samples, 1.57%)</title><rect x="716.1" y="307.0" width="18.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="719.1" y="318.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (4 samples, 1.05%)</title><rect x="716.1" y="291.0" width="12.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="719.1" y="302.0"></text>
</g>
<g>
<title>ext4_do_update_inode (4 samples, 1.05%)</title><rect x="716.1" y="275.0" width="12.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="719.1" y="286.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (3 samples, 0.79%)</title><rect x="719.2" y="259.0" width="9.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="722.2" y="270.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.0 (2 samples, 0.52%)</title><rect x="722.3" y="243.0" width="6.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="725.3" y="254.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (1 samples, 0.26%)</title><rect x="725.4" y="227.0" width="3.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="728.4" y="238.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (2 samples, 0.52%)</title><rect x="728.5" y="291.0" width="6.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="731.5" y="302.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (2 samples, 0.52%)</title><rect x="728.5" y="275.0" width="6.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="731.5" y="286.0"></text>
</g>
<g>
<title>__getblk_gfp (1 samples, 0.26%)</title><rect x="728.5" y="259.0" width="3.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="731.5" y="270.0"></text>
</g>
<g>
<title>__find_get_block (1 samples, 0.26%)</title><rect x="728.5" y="243.0" width="3.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="731.5" y="254.0"></text>
</g>
<g>
<title>mark_page_accessed (1 samples, 0.26%)</title><rect x="728.5" y="227.0" width="3.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="731.5" y="238.0"></text>
</g>
<g>
<title>ext4_get_group_desc (1 samples, 0.26%)</title><rect x="731.6" y="259.0" width="3.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="734.6" y="270.0"></text>
</g>
<g>
<title>iov_iter_advance (1 samples, 0.26%)</title><rect x="734.7" y="371.0" width="3.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="737.7" y="382.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (1 samples, 0.26%)</title><rect x="737.8" y="387.0" width="3.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="740.8" y="398.0"></text>
</g>
<g>
<title>ext4_write_checks (3 samples, 0.79%)</title><rect x="740.9" y="403.0" width="9.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="743.9" y="414.0"></text>
</g>
<g>
<title>generic_write_check_limits.isra.0 (3 samples, 0.79%)</title><rect x="740.9" y="387.0" width="9.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="743.9" y="398.0"></text>
</g>
<g>
<title>file_update_time (1 samples, 0.26%)</title><rect x="750.2" y="403.0" width="3.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="753.2" y="414.0"></text>
</g>
<g>
<title>ksys_write (1 samples, 0.26%)</title><rect x="753.3" y="499.0" width="3.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="756.3" y="510.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (3 samples, 0.79%)</title><rect x="756.4" y="579.0" width="9.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="759.4" y="590.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.26%)</title><rect x="756.4" y="563.0" width="3.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="759.4" y="574.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (1 samples, 0.26%)</title><rect x="759.5" y="563.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="762.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::UpdateFileChecksum(rocksdb::Slice const&amp;) (1 samples, 0.26%)</title><rect x="762.6" y="563.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="765.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (3 samples, 0.79%)</title><rect x="765.7" y="627.0" width="9.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="768.7" y="638.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.52%)</title><rect x="768.8" y="611.0" width="6.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="771.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::TrimHistoryScheduler::Empty() (1 samples, 0.26%)</title><rect x="775.0" y="627.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="778.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (2 samples, 0.52%)</title><rect x="778.1" y="627.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="781.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (76 samples, 19.95%)</title><rect x="784.3" y="627.0" width="235.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="787.3" y="638.0">rocksdb::WriteBatchInternal::In..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (73 samples, 19.16%)</title><rect x="793.6" y="611.0" width="226.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="796.6" y="622.0">rocksdb::WriteBatch::Iterate(r..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (73 samples, 19.16%)</title><rect x="793.6" y="595.0" width="226.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="796.6" y="606.0">rocksdb::WriteBatchInternal::I..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (70 samples, 18.37%)</title><rect x="793.6" y="579.0" width="216.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="796.6" y="590.0">rocksdb::MemTableInserter::P..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (70 samples, 18.37%)</title><rect x="793.6" y="563.0" width="216.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="796.6" y="574.0">rocksdb::MemTableInserter::P..</text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (66 samples, 17.32%)</title><rect x="806.0" y="547.0" width="204.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="809.0" y="558.0">rocksdb::MemTable::Add(unsi..</text>
</g>
<g>
<title>/tmp/librocksdbjni15702928521170118180.so (6 samples, 1.57%)</title><rect x="809.1" y="531.0" width="18.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="812.1" y="542.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.26%)</title><rect x="812.2" y="515.0" width="3.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="815.2" y="526.0"></text>
</g>
<g>
<title>rocksdb::Arena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (2 samples, 0.52%)</title><rect x="815.2" y="515.0" width="6.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="818.2" y="526.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (1 samples, 0.26%)</title><rect x="821.4" y="515.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="824.4" y="526.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.26%)</title><rect x="824.5" y="515.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="827.5" y="526.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (56 samples, 14.70%)</title><rect x="827.6" y="531.0" width="173.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="830.6" y="542.0">bool rocksdb::InlineSk..</text>
</g>
<g>
<title>/tmp/librocksdbjni15702928521170118180.so (45 samples, 11.81%)</title><rect x="827.6" y="515.0" width="139.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="830.6" y="526.0">/tmp/librocksdbjn..</text>
</g>
<g>
<title>/tmp/librocksdbjni15702928521170118180.so (17 samples, 4.46%)</title><rect x="830.7" y="499.0" width="52.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="833.7" y="510.0">/tmp/..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (17 samples, 4.46%)</title><rect x="830.7" y="483.0" width="52.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="833.7" y="494.0">rocks..</text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (17 samples, 4.46%)</title><rect x="830.7" y="467.0" width="52.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="833.7" y="478.0">rocks..</text>
</g>
<g>
<title>JNIEnv_::CallStaticIntMethod(_jclass*, _jmethodID*, ...) (8 samples, 2.10%)</title><rect x="830.7" y="451.0" width="24.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="833.7" y="462.0">J..</text>
</g>
<g>
<title>jni_CallStaticIntMethodV (8 samples, 2.10%)</title><rect x="830.7" y="435.0" width="24.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="833.7" y="446.0">j..</text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.26%)</title><rect x="830.7" y="419.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="833.7" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (2 samples, 0.52%)</title><rect x="833.8" y="419.0" width="6.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="836.8" y="430.0"></text>
</g>
<g>
<title>jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .isra.0] [clone .constprop.0] (4 samples, 1.05%)</title><rect x="840.0" y="419.0" width="12.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="843.0" y="430.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.26%)</title><rect x="849.3" y="403.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="852.3" y="414.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.26%)</title><rect x="849.3" y="387.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="852.3" y="398.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.26%)</title><rect x="849.3" y="371.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="852.3" y="382.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.26%)</title><rect x="852.4" y="419.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="855.4" y="430.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 1.05%)</title><rect x="855.5" y="451.0" width="12.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="858.5" y="462.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.26%)</title><rect x="864.8" y="435.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="867.8" y="446.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::ReuseBuffer(JNIEnv_*, rocksdb::Slice const&amp;, _jobject*) const (3 samples, 0.79%)</title><rect x="867.9" y="451.0" width="9.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="870.9" y="462.0"></text>
</g>
<g>
<title>jni_GetDirectBufferAddress (3 samples, 0.79%)</title><rect x="867.9" y="435.0" width="9.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="870.9" y="446.0"></text>
</g>
<g>
<title>jni_IsInstanceOf (2 samples, 0.52%)</title><rect x="867.9" y="419.0" width="6.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="870.9" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (1 samples, 0.26%)</title><rect x="871.0" y="403.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="874.0" y="414.0"></text>
</g>
<g>
<title>oopDesc::metadata_field(int) const (1 samples, 0.26%)</title><rect x="874.1" y="419.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="877.1" y="430.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (2 samples, 0.52%)</title><rect x="877.2" y="451.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="880.2" y="462.0"></text>
</g>
<g>
<title>Threads::is_supported_jni_version_including_1_1(int) (1 samples, 0.26%)</title><rect x="880.3" y="435.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="883.3" y="446.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.26%)</title><rect x="883.4" y="499.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="886.4" y="510.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (26 samples, 6.82%)</title><rect x="886.5" y="499.0" width="80.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="889.5" y="510.0">rocksdb::..</text>
</g>
<g>
<title>JNIEnv_::CallStaticIntMethod(_jclass*, _jmethodID*, ...) (1 samples, 0.26%)</title><rect x="886.5" y="483.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="889.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (21 samples, 5.51%)</title><rect x="889.6" y="483.0" width="65.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="892.6" y="494.0">rocksdb..</text>
</g>
<g>
<title>JNIEnv_::CallStaticIntMethod(_jclass*, _jmethodID*, ...) (11 samples, 2.89%)</title><rect x="895.8" y="467.0" width="34.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="898.8" y="478.0">JN..</text>
</g>
<g>
<title>jni_CallStaticIntMethodV (11 samples, 2.89%)</title><rect x="895.8" y="451.0" width="34.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="898.8" y="462.0">jn..</text>
</g>
<g>
<title>jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .isra.0] [clone .constprop.0] (8 samples, 2.10%)</title><rect x="905.1" y="435.0" width="24.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="908.1" y="446.0">j..</text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.26%)</title><rect x="911.3" y="419.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="914.3" y="430.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.79%)</title><rect x="914.4" y="419.0" width="9.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="917.4" y="430.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.26%)</title><rect x="917.5" y="403.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="920.5" y="414.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.26%)</title><rect x="920.6" y="403.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="923.6" y="414.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.26%)</title><rect x="923.6" y="419.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="926.6" y="430.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.26%)</title><rect x="926.7" y="419.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="929.7" y="430.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.26%)</title><rect x="929.8" y="467.0" width="3.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="932.8" y="478.0"></text>
</g>
<g>
<title>jni_CallStaticIntMethodV (1 samples, 0.26%)</title><rect x="932.9" y="467.0" width="3.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="935.9" y="478.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.26%)</title><rect x="936.0" y="467.0" width="3.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="939.0" y="478.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::ReuseBuffer(JNIEnv_*, rocksdb::Slice const&amp;, _jobject*) const (5 samples, 1.31%)</title><rect x="939.1" y="467.0" width="15.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="942.1" y="478.0"></text>
</g>
<g>
<title>jni_GetDirectBufferAddress (5 samples, 1.31%)</title><rect x="939.1" y="451.0" width="15.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="942.1" y="462.0"></text>
</g>
<g>
<title>jni_IsInstanceOf (3 samples, 0.79%)</title><rect x="939.1" y="435.0" width="9.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="942.1" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (2 samples, 0.52%)</title><rect x="942.2" y="419.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="945.2" y="430.0"></text>
</g>
<g>
<title>oopDesc::metadata_field(int) const (2 samples, 0.52%)</title><rect x="948.4" y="435.0" width="6.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="951.4" y="446.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.26%)</title><rect x="954.6" y="483.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="957.6" y="494.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (2 samples, 0.52%)</title><rect x="957.7" y="483.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="960.7" y="494.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const [clone .plt] (1 samples, 0.26%)</title><rect x="963.9" y="483.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="966.9" y="494.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (11 samples, 2.89%)</title><rect x="967.0" y="515.0" width="34.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="970.0" y="526.0">ro..</text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (11 samples, 2.89%)</title><rect x="967.0" y="499.0" width="34.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="970.0" y="510.0">ro..</text>
</g>
<g>
<title>JNIEnv_::CallStaticIntMethod(_jclass*, _jmethodID*, ...) (7 samples, 1.84%)</title><rect x="967.0" y="483.0" width="21.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="970.0" y="494.0">J..</text>
</g>
<g>
<title>InstanceKlass::initialize(Thread*) (1 samples, 0.26%)</title><rect x="967.0" y="467.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="970.0" y="478.0"></text>
</g>
<g>
<title>jni_CallStaticIntMethodV (6 samples, 1.57%)</title><rect x="970.1" y="467.0" width="18.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="973.1" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (2 samples, 0.52%)</title><rect x="973.2" y="451.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="976.2" y="462.0"></text>
</g>
<g>
<title>jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .isra.0] [clone .constprop.0] (3 samples, 0.79%)</title><rect x="979.4" y="451.0" width="9.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="982.4" y="462.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.52%)</title><rect x="982.5" y="435.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="985.5" y="446.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.26%)</title><rect x="982.5" y="419.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="985.5" y="430.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.26%)</title><rect x="985.6" y="419.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="988.6" y="430.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::ReuseBuffer(JNIEnv_*, rocksdb::Slice const&amp;, _jobject*) const (4 samples, 1.05%)</title><rect x="988.7" y="483.0" width="12.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="991.7" y="494.0"></text>
</g>
<g>
<title>jni_GetDirectBufferAddress (4 samples, 1.05%)</title><rect x="988.7" y="467.0" width="12.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="991.7" y="478.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097844ul, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.26%)</title><rect x="988.7" y="451.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="991.7" y="462.0"></text>
</g>
<g>
<title>jni_IsInstanceOf (2 samples, 0.52%)</title><rect x="991.8" y="451.0" width="6.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="994.8" y="462.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.26%)</title><rect x="991.8" y="435.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="994.8" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (1 samples, 0.26%)</title><rect x="994.9" y="435.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="997.9" y="446.0"></text>
</g>
<g>
<title>oopDesc::metadata_field(int) const (1 samples, 0.26%)</title><rect x="998.0" y="451.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1001.0" y="462.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (2 samples, 0.52%)</title><rect x="1001.1" y="531.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1004.1" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.26%)</title><rect x="1007.3" y="531.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1010.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (3 samples, 0.79%)</title><rect x="1010.4" y="579.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1013.4" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long) (1 samples, 0.26%)</title><rect x="1019.7" y="627.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1022.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.26%)</title><rect x="1022.8" y="627.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1025.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (1 samples, 0.26%)</title><rect x="1025.9" y="627.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1028.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.26%)</title><rect x="1025.9" y="611.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1028.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.52%)</title><rect x="1029.0" y="627.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1032.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (2 samples, 0.52%)</title><rect x="1035.1" y="643.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1038.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.26%)</title><rect x="1041.3" y="643.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1044.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) [clone .plt] (1 samples, 0.26%)</title><rect x="1044.4" y="643.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1047.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.79%)</title><rect x="1047.5" y="659.0" width="9.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1050.5" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) [clone .plt] (1 samples, 0.26%)</title><rect x="1047.5" y="643.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1050.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, unsigned int) (2 samples, 0.52%)</title><rect x="1050.6" y="643.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1053.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (2 samples, 0.52%)</title><rect x="1056.8" y="659.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1059.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.26%)</title><rect x="1063.0" y="659.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1066.0" y="670.0"></text>
</g>
<g>
<title>std::string::append(unsigned long, char) (1 samples, 0.26%)</title><rect x="1066.1" y="659.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1069.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() [clone .plt] (1 samples, 0.26%)</title><rect x="1069.2" y="675.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1072.2" y="686.0"></text>
</g>
<g>
<title>__libc_malloc (1 samples, 0.26%)</title><rect x="1072.3" y="739.0" width="3.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1075.3" y="750.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.26%)</title><rect x="1075.4" y="739.0" width="3.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1078.4" y="750.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractComparatorJniBridge.compareInternal (9 samples, 2.36%)</title><rect x="1078.5" y="739.0" width="27.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1081.5" y="750.0">o..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.26%)</title><rect x="1084.7" y="723.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1087.7" y="734.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.mark (1 samples, 0.26%)</title><rect x="1087.8" y="723.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1090.8" y="734.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.mark (1 samples, 0.26%)</title><rect x="1087.8" y="707.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1090.8" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/util/SignedBytesComparator.compare (4 samples, 1.05%)</title><rect x="1090.9" y="723.0" width="12.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1093.9" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.byteBufferToBytes (4 samples, 1.05%)</title><rect x="1090.9" y="707.0" width="12.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1093.9" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.26%)</title><rect x="1090.9" y="691.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1093.9" y="702.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.26%)</title><rect x="1090.9" y="675.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.9" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.26%)</title><rect x="1090.9" y="659.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1093.9" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.26%)</title><rect x="1090.9" y="643.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1093.9" y="654.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.26%)</title><rect x="1090.9" y="627.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1093.9" y="638.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.26%)</title><rect x="1090.9" y="611.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.9" y="622.0"></text>
</g>
<g>
<title>DefNewGeneration::supports_tlab_allocation() const (1 samples, 0.26%)</title><rect x="1090.9" y="595.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.9" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.duplicate (2 samples, 0.52%)</title><rect x="1094.0" y="691.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1097.0" y="702.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.52%)</title><rect x="1094.0" y="675.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1097.0" y="686.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.52%)</title><rect x="1094.0" y="659.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1097.0" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.52%)</title><rect x="1094.0" y="643.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1097.0" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.52%)</title><rect x="1094.0" y="627.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1097.0" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.52%)</title><rect x="1094.0" y="611.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1097.0" y="622.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.26%)</title><rect x="1094.0" y="595.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1097.0" y="606.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.26%)</title><rect x="1097.1" y="595.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1100.1" y="606.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.26%)</title><rect x="1097.1" y="579.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1100.1" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.26%)</title><rect x="1097.1" y="563.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1100.1" y="574.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.26%)</title><rect x="1100.2" y="691.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1103.2" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.26%)</title><rect x="1100.2" y="675.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1103.2" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (1 samples, 0.26%)</title><rect x="1100.2" y="659.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1103.2" y="670.0"></text>
</g>
<g>
<title>unsafe_arraycopy (1 samples, 0.26%)</title><rect x="1103.3" y="723.0" width="3.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1106.3" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.byteBufferToBytes (3 samples, 0.79%)</title><rect x="1106.4" y="771.0" width="9.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1109.4" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.26%)</title><rect x="1109.5" y="755.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1112.5" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.26%)</title><rect x="1109.5" y="739.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1112.5" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.26%)</title><rect x="1109.5" y="723.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1112.5" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.26%)</title><rect x="1109.5" y="707.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1112.5" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.26%)</title><rect x="1109.5" y="691.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1112.5" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.26%)</title><rect x="1109.5" y="675.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1112.5" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.26%)</title><rect x="1109.5" y="659.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1112.5" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.26%)</title><rect x="1112.6" y="755.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1115.6" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (1 samples, 0.26%)</title><rect x="1115.7" y="819.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1118.7" y="830.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.26%)</title><rect x="1118.8" y="819.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1121.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.26%)</title><rect x="1118.8" y="803.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1121.8" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.26%)</title><rect x="1118.8" y="787.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1121.8" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.26%)</title><rect x="1118.8" y="771.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1121.8" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.52%)</title><rect x="1121.9" y="851.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1124.9" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.26%)</title><rect x="1121.9" y="835.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1124.9" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.26%)</title><rect x="1121.9" y="819.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1124.9" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.26%)</title><rect x="1121.9" y="803.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1124.9" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.26%)</title><rect x="1121.9" y="787.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1124.9" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.26%)</title><rect x="1125.0" y="835.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1128.0" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3 samples, 0.79%)</title><rect x="1128.1" y="851.0" width="9.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1131.1" y="862.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.52%)</title><rect x="1128.1" y="835.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1131.1" y="846.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.52%)</title><rect x="1128.1" y="819.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1131.1" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.26%)</title><rect x="1134.3" y="835.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1137.3" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.79%)</title><rect x="1137.3" y="851.0" width="9.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1140.3" y="862.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.52%)</title><rect x="1140.4" y="835.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1143.4" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.52%)</title><rect x="1140.4" y="819.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1143.4" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.52%)</title><rect x="1140.4" y="803.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1143.4" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.26%)</title><rect x="1143.5" y="787.0" width="3.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1146.5" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.26%)</title><rect x="1146.6" y="851.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1149.6" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.26%)</title><rect x="1146.6" y="835.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1149.6" y="846.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.26%)</title><rect x="1146.6" y="819.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1149.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (1 samples, 0.26%)</title><rect x="1146.6" y="803.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1149.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsOffCount (1 samples, 0.26%)</title><rect x="1146.6" y="787.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1149.6" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (12 samples, 3.15%)</title><rect x="1149.7" y="867.0" width="37.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1152.7" y="878.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (12 samples, 3.15%)</title><rect x="1149.7" y="851.0" width="37.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1152.7" y="862.0">one..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.26%)</title><rect x="1155.9" y="835.0" width="3.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1158.9" y="846.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (1 samples, 0.26%)</title><rect x="1159.0" y="835.0" width="3.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1162.0" y="846.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.26%)</title><rect x="1159.0" y="819.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.0" y="830.0"></text>
</g>
<g>
<title>__recv (8 samples, 2.10%)</title><rect x="1162.1" y="835.0" width="24.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1165.1" y="846.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (7 samples, 1.84%)</title><rect x="1165.2" y="819.0" width="21.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1168.2" y="830.0">e..</text>
</g>
<g>
<title>do_syscall_64 (7 samples, 1.84%)</title><rect x="1165.2" y="803.0" width="21.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1168.2" y="814.0">d..</text>
</g>
<g>
<title>__x64_sys_recvfrom (7 samples, 1.84%)</title><rect x="1165.2" y="787.0" width="21.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1168.2" y="798.0">_..</text>
</g>
<g>
<title>__sys_recvfrom (6 samples, 1.57%)</title><rect x="1168.3" y="771.0" width="18.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1171.3" y="782.0"></text>
</g>
<g>
<title>sock_recvmsg (5 samples, 1.31%)</title><rect x="1171.4" y="755.0" width="15.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1174.4" y="766.0"></text>
</g>
<g>
<title>inet6_recvmsg (3 samples, 0.79%)</title><rect x="1174.5" y="739.0" width="9.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1177.5" y="750.0"></text>
</g>
<g>
<title>tcp_recvmsg (2 samples, 0.52%)</title><rect x="1177.6" y="723.0" width="6.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1180.6" y="734.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (1 samples, 0.26%)</title><rect x="1180.7" y="707.0" width="3.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1183.7" y="718.0"></text>
</g>
<g>
<title>__skb_datagram_iter (1 samples, 0.26%)</title><rect x="1180.7" y="691.0" width="3.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1183.7" y="702.0"></text>
</g>
<g>
<title>simple_copy_to_iter (1 samples, 0.26%)</title><rect x="1180.7" y="675.0" width="3.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1183.7" y="686.0"></text>
</g>
<g>
<title>_copy_to_iter (1 samples, 0.26%)</title><rect x="1180.7" y="659.0" width="3.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1183.7" y="670.0"></text>
</g>
<g>
<title>copy_user_generic_string (1 samples, 0.26%)</title><rect x="1180.7" y="643.0" width="3.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1183.7" y="654.0"></text>
</g>
<g>
<title>security_socket_recvmsg (1 samples, 0.26%)</title><rect x="1183.8" y="739.0" width="3.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1186.8" y="750.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.26%)</title><rect x="1183.8" y="723.0" width="3.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1186.8" y="734.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.26%)</title><rect x="1183.8" y="707.0" width="3.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1186.8" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.26%)</title><rect x="1186.9" y="899.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.9" y="910.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.26%)</title><rect x="1186.9" y="883.0" width="3.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1189.9" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.26%)</title><rect x="1186.9" y="867.0" width="3.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1189.9" y="878.0"></text>
</g>
</g>
</svg>
