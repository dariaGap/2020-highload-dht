<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (292 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (292 samples, 100.00%)</title><rect x="10.0" y="883.0" width="1180.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.34%)</title><rect x="10.0" y="867.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.34%)</title><rect x="10.0" y="851.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.34%)</title><rect x="10.0" y="835.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (46 samples, 15.75%)</title><rect x="14.0" y="867.0" width="185.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.0" y="878.0">one/nio/net/NativeSelect..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (46 samples, 15.75%)</title><rect x="14.0" y="851.0" width="185.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.0" y="862.0">one/nio/net/NativeSelect..</text>
</g>
<g>
<title>epoll_wait (46 samples, 15.75%)</title><rect x="14.0" y="835.0" width="185.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="17.0" y="846.0">epoll_wait</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (46 samples, 15.75%)</title><rect x="14.0" y="819.0" width="185.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="17.0" y="830.0">entry_SYSCALL_64_after_h..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (1 samples, 0.34%)</title><rect x="14.0" y="803.0" width="4.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="17.0" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (45 samples, 15.41%)</title><rect x="18.1" y="803.0" width="181.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="21.1" y="814.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_epoll_wait (45 samples, 15.41%)</title><rect x="18.1" y="787.0" width="181.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="21.1" y="798.0">__x64_sys_epoll_wait</text>
</g>
<g>
<title>do_epoll_wait (45 samples, 15.41%)</title><rect x="18.1" y="771.0" width="181.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="21.1" y="782.0">do_epoll_wait</text>
</g>
<g>
<title>ep_poll (44 samples, 15.07%)</title><rect x="18.1" y="755.0" width="177.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="21.1" y="766.0">ep_poll</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (5 samples, 1.71%)</title><rect x="22.1" y="739.0" width="20.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="25.1" y="750.0"></text>
</g>
<g>
<title>ep_send_events_proc (3 samples, 1.03%)</title><rect x="30.2" y="723.0" width="12.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="33.2" y="734.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.34%)</title><rect x="30.2" y="707.0" width="4.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="33.2" y="718.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (2 samples, 0.68%)</title><rect x="34.2" y="707.0" width="8.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="37.2" y="718.0"></text>
</g>
<g>
<title>sock_poll (1 samples, 0.34%)</title><rect x="34.2" y="691.0" width="4.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="37.2" y="702.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.34%)</title><rect x="34.2" y="675.0" width="4.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="37.2" y="686.0"></text>
</g>
<g>
<title>tcp_poll (1 samples, 0.34%)</title><rect x="38.3" y="691.0" width="4.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="41.3" y="702.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (38 samples, 13.01%)</title><rect x="42.3" y="739.0" width="153.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="45.3" y="750.0">schedule_hrtimeout_..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (38 samples, 13.01%)</title><rect x="42.3" y="723.0" width="153.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="45.3" y="734.0">schedule_hrtimeout_..</text>
</g>
<g>
<title>schedule (38 samples, 13.01%)</title><rect x="42.3" y="707.0" width="153.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="45.3" y="718.0">schedule</text>
</g>
<g>
<title>__schedule (38 samples, 13.01%)</title><rect x="42.3" y="691.0" width="153.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="45.3" y="702.0">__schedule</text>
</g>
<g>
<title>finish_task_switch (38 samples, 13.01%)</title><rect x="42.3" y="675.0" width="153.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="45.3" y="686.0">finish_task_switch</text>
</g>
<g>
<title>schedule_hrtimeout_range (1 samples, 0.34%)</title><rect x="195.9" y="755.0" width="4.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="198.9" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (245 samples, 83.90%)</title><rect x="199.9" y="867.0" width="990.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="202.9" y="878.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (245 samples, 83.90%)</title><rect x="199.9" y="851.0" width="990.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="202.9" y="862.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (236 samples, 80.82%)</title><rect x="199.9" y="835.0" width="953.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="202.9" y="846.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (229 samples, 78.42%)</title><rect x="204.0" y="819.0" width="925.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="207.0" y="830.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (228 samples, 78.08%)</title><rect x="208.0" y="803.0" width="921.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.0" y="814.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (226 samples, 77.40%)</title><rect x="208.0" y="787.0" width="913.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.0" y="798.0">RequestHandler1_put.handleRequest</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="208.0" y="771.0" width="4.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="211.0" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (86 samples, 29.45%)</title><rect x="212.1" y="771.0" width="347.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="215.1" y="782.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.34%)</title><rect x="212.1" y="755.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.34%)</title><rect x="212.1" y="739.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="215.1" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (84 samples, 28.77%)</title><rect x="216.1" y="755.0" width="339.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="219.1" y="766.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.68%)</title><rect x="216.1" y="739.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="219.1" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.34%)</title><rect x="220.1" y="723.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="223.1" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.34%)</title><rect x="220.1" y="707.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="223.1" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.34%)</title><rect x="220.1" y="691.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="223.1" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (82 samples, 28.08%)</title><rect x="224.2" y="739.0" width="331.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.2" y="750.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (82 samples, 28.08%)</title><rect x="224.2" y="723.0" width="331.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="227.2" y="734.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (82 samples, 28.08%)</title><rect x="224.2" y="707.0" width="331.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.2" y="718.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (82 samples, 28.08%)</title><rect x="224.2" y="691.0" width="331.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="227.2" y="702.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.68%)</title><rect x="228.2" y="675.0" width="8.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="231.2" y="686.0"></text>
</g>
<g>
<title>send (79 samples, 27.05%)</title><rect x="236.3" y="675.0" width="319.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="239.3" y="686.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (76 samples, 26.03%)</title><rect x="248.4" y="659.0" width="307.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="251.4" y="670.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>__x64_sys_sendto (1 samples, 0.34%)</title><rect x="248.4" y="643.0" width="4.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="251.4" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (75 samples, 25.68%)</title><rect x="252.5" y="643.0" width="303.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="255.5" y="654.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (75 samples, 25.68%)</title><rect x="252.5" y="627.0" width="303.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="255.5" y="638.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (75 samples, 25.68%)</title><rect x="252.5" y="611.0" width="303.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="255.5" y="622.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (75 samples, 25.68%)</title><rect x="252.5" y="595.0" width="303.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="255.5" y="606.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (74 samples, 25.34%)</title><rect x="252.5" y="579.0" width="299.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="255.5" y="590.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (73 samples, 25.00%)</title><rect x="256.5" y="563.0" width="295.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="259.5" y="574.0">tcp_sendmsg</text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.34%)</title><rect x="256.5" y="547.0" width="4.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="259.5" y="558.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (70 samples, 23.97%)</title><rect x="260.5" y="547.0" width="282.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="263.5" y="558.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__tcp_push_pending_frames (1 samples, 0.34%)</title><rect x="264.6" y="531.0" width="4.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="267.6" y="542.0"></text>
</g>
<g>
<title>_copy_from_iter_full (1 samples, 0.34%)</title><rect x="268.6" y="531.0" width="4.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="271.6" y="542.0"></text>
</g>
<g>
<title>copy_user_generic_string (1 samples, 0.34%)</title><rect x="268.6" y="515.0" width="4.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="271.6" y="526.0"></text>
</g>
<g>
<title>sk_forced_mem_schedule (1 samples, 0.34%)</title><rect x="272.7" y="531.0" width="4.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="275.7" y="542.0"></text>
</g>
<g>
<title>sk_page_frag_refill (2 samples, 0.68%)</title><rect x="276.7" y="531.0" width="8.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="279.7" y="542.0"></text>
</g>
<g>
<title>skb_page_frag_refill (2 samples, 0.68%)</title><rect x="276.7" y="515.0" width="8.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="279.7" y="526.0"></text>
</g>
<g>
<title>alloc_pages_current (1 samples, 0.34%)</title><rect x="280.8" y="499.0" width="4.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="283.8" y="510.0"></text>
</g>
<g>
<title>should_fail_alloc_page (1 samples, 0.34%)</title><rect x="280.8" y="483.0" width="4.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="283.8" y="494.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (5 samples, 1.71%)</title><rect x="284.8" y="531.0" width="20.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="287.8" y="542.0"></text>
</g>
<g>
<title>__alloc_skb (5 samples, 1.71%)</title><rect x="284.8" y="515.0" width="20.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="287.8" y="526.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (3 samples, 1.03%)</title><rect x="288.8" y="499.0" width="12.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="291.8" y="510.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (2 samples, 0.68%)</title><rect x="288.8" y="483.0" width="8.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="291.8" y="494.0"></text>
</g>
<g>
<title>__slab_alloc (1 samples, 0.34%)</title><rect x="292.9" y="467.0" width="4.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="295.9" y="478.0"></text>
</g>
<g>
<title>memset (1 samples, 0.34%)</title><rect x="296.9" y="483.0" width="4.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="299.9" y="494.0"></text>
</g>
<g>
<title>memset (1 samples, 0.34%)</title><rect x="301.0" y="499.0" width="4.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="304.0" y="510.0"></text>
</g>
<g>
<title>tcp_push (59 samples, 20.21%)</title><rect x="305.0" y="531.0" width="238.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="308.0" y="542.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (58 samples, 19.86%)</title><rect x="305.0" y="515.0" width="234.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="308.0" y="526.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>tcp_write_xmit (58 samples, 19.86%)</title><rect x="305.0" y="499.0" width="234.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="308.0" y="510.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (52 samples, 17.81%)</title><rect x="313.1" y="483.0" width="210.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="316.1" y="494.0">__tcp_transmit_skb</text>
</g>
<g>
<title>ip_queue_xmit (49 samples, 16.78%)</title><rect x="325.2" y="467.0" width="198.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="328.2" y="478.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (48 samples, 16.44%)</title><rect x="329.2" y="451.0" width="194.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="332.2" y="462.0">__ip_queue_xmit</text>
</g>
<g>
<title>ip_local_out (47 samples, 16.10%)</title><rect x="329.2" y="435.0" width="190.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="332.2" y="446.0">ip_local_out</text>
</g>
<g>
<title>ip_output (46 samples, 15.75%)</title><rect x="333.3" y="419.0" width="185.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="336.3" y="430.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (45 samples, 15.41%)</title><rect x="337.3" y="403.0" width="181.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="340.3" y="414.0">ip_finish_output</text>
</g>
<g>
<title>__ip_finish_output (43 samples, 14.73%)</title><rect x="337.3" y="387.0" width="173.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="340.3" y="398.0">__ip_finish_output</text>
</g>
<g>
<title>ip_finish_output2 (42 samples, 14.38%)</title><rect x="341.4" y="371.0" width="169.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="344.4" y="382.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (34 samples, 11.64%)</title><rect x="341.4" y="355.0" width="137.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="344.4" y="366.0">__local_bh_enable..</text>
</g>
<g>
<title>do_softirq.part.0 (34 samples, 11.64%)</title><rect x="341.4" y="339.0" width="137.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="344.4" y="350.0">do_softirq.part.0</text>
</g>
<g>
<title>do_softirq_own_stack (34 samples, 11.64%)</title><rect x="341.4" y="323.0" width="137.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="344.4" y="334.0">do_softirq_own_st..</text>
</g>
<g>
<title>__softirqentry_text_start (34 samples, 11.64%)</title><rect x="341.4" y="307.0" width="137.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="344.4" y="318.0">__softirqentry_te..</text>
</g>
<g>
<title>net_rx_action (32 samples, 10.96%)</title><rect x="341.4" y="291.0" width="129.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="344.4" y="302.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (32 samples, 10.96%)</title><rect x="341.4" y="275.0" width="129.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="344.4" y="286.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (29 samples, 9.93%)</title><rect x="353.5" y="259.0" width="117.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="356.5" y="270.0">__netif_receiv..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (29 samples, 9.93%)</title><rect x="353.5" y="243.0" width="117.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="356.5" y="254.0">__netif_receiv..</text>
</g>
<g>
<title>ip_rcv (29 samples, 9.93%)</title><rect x="353.5" y="227.0" width="117.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="356.5" y="238.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_core.isra.0 (1 samples, 0.34%)</title><rect x="353.5" y="211.0" width="4.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="356.5" y="222.0"></text>
</g>
<g>
<title>ip_rcv_finish (28 samples, 9.59%)</title><rect x="357.5" y="211.0" width="113.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="360.5" y="222.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (28 samples, 9.59%)</title><rect x="357.5" y="195.0" width="113.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="360.5" y="206.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (28 samples, 9.59%)</title><rect x="357.5" y="179.0" width="113.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="360.5" y="190.0">ip_local_deliv..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (27 samples, 9.25%)</title><rect x="357.5" y="163.0" width="109.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="360.5" y="174.0">ip_protocol_d..</text>
</g>
<g>
<title>tcp_v4_rcv (26 samples, 8.90%)</title><rect x="361.6" y="147.0" width="105.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="364.6" y="158.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (4 samples, 1.37%)</title><rect x="365.6" y="131.0" width="16.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="368.6" y="142.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.34%)</title><rect x="381.8" y="131.0" width="4.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="384.8" y="142.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (1 samples, 0.34%)</title><rect x="381.8" y="115.0" width="4.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="384.8" y="126.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (20 samples, 6.85%)</title><rect x="385.8" y="131.0" width="80.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="388.8" y="142.0">tcp_v4_do..</text>
</g>
<g>
<title>tcp_data_ready (1 samples, 0.34%)</title><rect x="385.8" y="115.0" width="4.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="388.8" y="126.0"></text>
</g>
<g>
<title>tcp_rcv_established (19 samples, 6.51%)</title><rect x="389.9" y="115.0" width="76.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="392.9" y="126.0">tcp_rcv_..</text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.34%)</title><rect x="389.9" y="99.0" width="4.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="392.9" y="110.0"></text>
</g>
<g>
<title>tcp_ack (7 samples, 2.40%)</title><rect x="393.9" y="99.0" width="28.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="396.9" y="110.0">tc..</text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.68%)</title><rect x="393.9" y="83.0" width="8.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="396.9" y="94.0"></text>
</g>
<g>
<title>tcp_chrono_stop (1 samples, 0.34%)</title><rect x="402.0" y="83.0" width="4.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="405.0" y="94.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (3 samples, 1.03%)</title><rect x="406.0" y="83.0" width="12.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="409.0" y="94.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.34%)</title><rect x="414.1" y="67.0" width="4.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="417.1" y="78.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.34%)</title><rect x="414.1" y="51.0" width="4.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="417.1" y="62.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.34%)</title><rect x="414.1" y="35.0" width="4.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="417.1" y="46.0"></text>
</g>
<g>
<title>tcp_rate_gen (1 samples, 0.34%)</title><rect x="418.2" y="83.0" width="4.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="421.2" y="94.0"></text>
</g>
<g>
<title>tcp_data_ready (9 samples, 3.08%)</title><rect x="422.2" y="99.0" width="36.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="425.2" y="110.0">tcp..</text>
</g>
<g>
<title>sock_def_readable (9 samples, 3.08%)</title><rect x="422.2" y="83.0" width="36.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="425.2" y="94.0">soc..</text>
</g>
<g>
<title>__wake_up_sync_key (6 samples, 2.05%)</title><rect x="434.3" y="67.0" width="24.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="437.3" y="78.0">_..</text>
</g>
<g>
<title>__wake_up_common_lock (6 samples, 2.05%)</title><rect x="434.3" y="51.0" width="24.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="437.3" y="62.0">_..</text>
</g>
<g>
<title>__lock_text_start (6 samples, 2.05%)</title><rect x="434.3" y="35.0" width="24.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="437.3" y="46.0">_..</text>
</g>
<g>
<title>tcp_event_data_recv (1 samples, 0.34%)</title><rect x="458.6" y="99.0" width="4.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="461.6" y="110.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (1 samples, 0.34%)</title><rect x="462.6" y="99.0" width="4.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="465.6" y="110.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.34%)</title><rect x="462.6" y="83.0" width="4.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="465.6" y="94.0"></text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.34%)</title><rect x="466.6" y="163.0" width="4.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="469.6" y="174.0"></text>
</g>
<g>
<title>process_backlog (2 samples, 0.68%)</title><rect x="470.7" y="291.0" width="8.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="473.7" y="302.0"></text>
</g>
<g>
<title>dev_queue_xmit (8 samples, 2.74%)</title><rect x="478.8" y="355.0" width="32.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="481.8" y="366.0">de..</text>
</g>
<g>
<title>__dev_queue_xmit (8 samples, 2.74%)</title><rect x="478.8" y="339.0" width="32.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="481.8" y="350.0">__..</text>
</g>
<g>
<title>dev_hard_start_xmit (2 samples, 0.68%)</title><rect x="494.9" y="323.0" width="8.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="497.9" y="334.0"></text>
</g>
<g>
<title>loopback_xmit (2 samples, 0.68%)</title><rect x="494.9" y="307.0" width="8.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="497.9" y="318.0"></text>
</g>
<g>
<title>eth_type_trans (1 samples, 0.34%)</title><rect x="494.9" y="291.0" width="4.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="497.9" y="302.0"></text>
</g>
<g>
<title>netif_rx (1 samples, 0.34%)</title><rect x="499.0" y="291.0" width="4.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="502.0" y="302.0"></text>
</g>
<g>
<title>netif_rx_internal (1 samples, 0.34%)</title><rect x="499.0" y="275.0" width="4.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="502.0" y="286.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.34%)</title><rect x="503.0" y="323.0" width="4.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="506.0" y="334.0"></text>
</g>
<g>
<title>netdev_core_pick_tx (1 samples, 0.34%)</title><rect x="507.1" y="323.0" width="4.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="510.1" y="334.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.68%)</title><rect x="511.1" y="387.0" width="8.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="514.1" y="398.0"></text>
</g>
<g>
<title>ip_output (1 samples, 0.34%)</title><rect x="519.2" y="435.0" width="4.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="522.2" y="446.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.34%)</title><rect x="523.2" y="483.0" width="4.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="526.2" y="494.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.34%)</title><rect x="527.3" y="483.0" width="4.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="530.3" y="494.0"></text>
</g>
<g>
<title>ip_queue_xmit (1 samples, 0.34%)</title><rect x="531.3" y="483.0" width="4.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="534.3" y="494.0"></text>
</g>
<g>
<title>rb_first (1 samples, 0.34%)</title><rect x="535.3" y="483.0" width="4.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="538.3" y="494.0"></text>
</g>
<g>
<title>tcp_write_xmit (1 samples, 0.34%)</title><rect x="539.4" y="515.0" width="4.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="542.4" y="526.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.68%)</title><rect x="543.4" y="547.0" width="8.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="546.4" y="558.0"></text>
</g>
<g>
<title>security_socket_sendmsg (1 samples, 0.34%)</title><rect x="551.5" y="579.0" width="4.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="554.5" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.34%)</title><rect x="555.5" y="755.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="558.5" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.34%)</title><rect x="559.6" y="771.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="562.6" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.34%)</title><rect x="559.6" y="755.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="562.6" y="766.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.34%)</title><rect x="559.6" y="739.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="562.6" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/ServiceImpl.put (138 samples, 47.26%)</title><rect x="563.6" y="771.0" width="557.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="566.6" y="782.0">ru/mail/polis/service/dariagap/ServiceImpl.put</text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 1.03%)</title><rect x="563.6" y="755.0" width="12.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="566.6" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (3 samples, 1.03%)</title><rect x="563.6" y="739.0" width="12.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="566.6" y="750.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (3 samples, 1.03%)</title><rect x="563.6" y="723.0" width="12.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="566.6" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.68%)</title><rect x="567.7" y="707.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="570.7" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.68%)</title><rect x="567.7" y="691.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="570.7" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 1.03%)</title><rect x="575.8" y="755.0" width="12.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="578.8" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 1.03%)</title><rect x="575.8" y="739.0" width="12.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="578.8" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.34%)</title><rect x="579.8" y="723.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="582.8" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.34%)</title><rect x="579.8" y="707.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="582.8" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.34%)</title><rect x="579.8" y="691.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="582.8" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.34%)</title><rect x="583.8" y="723.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="586.8" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dariagap/RocksDBStorage.upsert (132 samples, 45.21%)</title><rect x="587.9" y="755.0" width="533.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="590.9" y="766.0">ru/mail/polis/dao/dariagap/RocksDBStorage.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (130 samples, 44.52%)</title><rect x="587.9" y="739.0" width="525.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="590.9" y="750.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (130 samples, 44.52%)</title><rect x="587.9" y="723.0" width="525.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="590.9" y="734.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.34%)</title><rect x="587.9" y="707.0" width="4.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="590.9" y="718.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (126 samples, 43.15%)</title><rect x="591.9" y="707.0" width="509.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="594.9" y="718.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.34%)</title><rect x="591.9" y="691.0" width="4.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="594.9" y="702.0"></text>
</g>
<g>
<title>operator new[](unsigned long) [clone .plt] (1 samples, 0.34%)</title><rect x="596.0" y="691.0" width="4.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="599.0" y="702.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (124 samples, 42.47%)</title><rect x="600.0" y="691.0" width="501.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="603.0" y="702.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions cons..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.34%)</title><rect x="604.0" y="675.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="607.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (122 samples, 41.78%)</title><rect x="608.1" y="675.0" width="493.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="611.1" y="686.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (122 samples, 41.78%)</title><rect x="608.1" y="659.0" width="493.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="611.1" y="670.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFa..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (120 samples, 41.10%)</title><rect x="608.1" y="643.0" width="484.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="611.1" y="654.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamil..</text>
</g>
<g>
<title>cfree (1 samples, 0.34%)</title><rect x="608.1" y="627.0" width="4.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="611.1" y="638.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.34%)</title><rect x="612.1" y="627.0" width="4.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="615.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (2 samples, 0.68%)</title><rect x="616.2" y="627.0" width="8.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="619.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (112 samples, 38.36%)</title><rect x="624.2" y="627.0" width="452.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="627.2" y="638.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (105 samples, 35.96%)</title><rect x="624.2" y="611.0" width="424.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="627.2" y="622.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, r..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.34%)</title><rect x="636.4" y="595.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="639.4" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.68%)</title><rect x="640.4" y="595.0" width="8.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="643.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (1 samples, 0.34%)</title><rect x="648.5" y="595.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="651.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() (1 samples, 0.34%)</title><rect x="652.5" y="595.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="655.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (58 samples, 19.86%)</title><rect x="656.6" y="595.0" width="234.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="659.6" y="606.0">rocksdb::DBImpl::WriteToWAL(roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (57 samples, 19.52%)</title><rect x="660.6" y="579.0" width="230.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="663.6" y="590.0">rocksdb::DBImpl::WriteToWAL(ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (57 samples, 19.52%)</title><rect x="660.6" y="563.0" width="230.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="663.6" y="574.0">rocksdb::log::Writer::AddRecor..</text>
</g>
<g>
<title>/tmp/librocksdbjni16518900048097374765.so (2 samples, 0.68%)</title><rect x="664.7" y="547.0" width="8.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="667.7" y="558.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (52 samples, 17.81%)</title><rect x="672.7" y="547.0" width="210.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="675.7" y="558.0">rocksdb::WritableFileWriter:..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.34%)</title><rect x="684.9" y="531.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="687.9" y="542.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (48 samples, 16.44%)</title><rect x="688.9" y="531.0" width="194.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="691.9" y="542.0">rocksdb::WritableFileWrit..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.34%)</title><rect x="692.9" y="515.0" width="4.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="695.9" y="526.0"></text>
</g>
<g>
<title>__write (46 samples, 15.75%)</title><rect x="697.0" y="515.0" width="185.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="700.0" y="526.0">__write</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (43 samples, 14.73%)</title><rect x="709.1" y="499.0" width="173.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="712.1" y="510.0">entry_SYSCALL_64_after..</text>
</g>
<g>
<title>__x64_sys_write (2 samples, 0.68%)</title><rect x="709.1" y="483.0" width="8.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="712.1" y="494.0"></text>
</g>
<g>
<title>do_syscall_64 (41 samples, 14.04%)</title><rect x="717.2" y="483.0" width="165.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="720.2" y="494.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_write (39 samples, 13.36%)</title><rect x="725.3" y="467.0" width="157.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="728.3" y="478.0">__x64_sys_write</text>
</g>
<g>
<title>ksys_write (39 samples, 13.36%)</title><rect x="725.3" y="451.0" width="157.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="728.3" y="462.0">ksys_write</text>
</g>
<g>
<title>__fdget_pos (2 samples, 0.68%)</title><rect x="729.3" y="435.0" width="8.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="732.3" y="446.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.68%)</title><rect x="729.3" y="419.0" width="8.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="732.3" y="430.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.68%)</title><rect x="729.3" y="403.0" width="8.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="732.3" y="414.0"></text>
</g>
<g>
<title>__vfs_write (1 samples, 0.34%)</title><rect x="737.4" y="435.0" width="4.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="740.4" y="446.0"></text>
</g>
<g>
<title>vfs_write (35 samples, 11.99%)</title><rect x="741.4" y="435.0" width="141.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="744.4" y="446.0">vfs_write</text>
</g>
<g>
<title>__sb_start_write (1 samples, 0.34%)</title><rect x="741.4" y="419.0" width="4.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="744.4" y="430.0"></text>
</g>
<g>
<title>__vfs_write (30 samples, 10.27%)</title><rect x="745.5" y="419.0" width="121.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="748.5" y="430.0">__vfs_write</text>
</g>
<g>
<title>new_sync_write (30 samples, 10.27%)</title><rect x="745.5" y="403.0" width="121.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="748.5" y="414.0">new_sync_write</text>
</g>
<g>
<title>__generic_file_write_iter (1 samples, 0.34%)</title><rect x="745.5" y="387.0" width="4.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="748.5" y="398.0"></text>
</g>
<g>
<title>down_write_trylock (1 samples, 0.34%)</title><rect x="749.5" y="387.0" width="4.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="752.5" y="398.0"></text>
</g>
<g>
<title>ext4_file_write_iter (28 samples, 9.59%)</title><rect x="753.6" y="387.0" width="113.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="756.6" y="398.0">ext4_file_writ..</text>
</g>
<g>
<title>__generic_file_write_iter (25 samples, 8.56%)</title><rect x="761.6" y="371.0" width="101.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="764.6" y="382.0">__generic_fi..</text>
</g>
<g>
<title>generic_perform_write (25 samples, 8.56%)</title><rect x="761.6" y="355.0" width="101.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="764.6" y="366.0">generic_perf..</text>
</g>
<g>
<title>ext4_da_write_begin (9 samples, 3.08%)</title><rect x="761.6" y="339.0" width="36.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="764.6" y="350.0">ext..</text>
</g>
<g>
<title>__ext4_journal_start_sb (4 samples, 1.37%)</title><rect x="765.7" y="323.0" width="16.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="768.7" y="334.0"></text>
</g>
<g>
<title>jbd2__journal_start (4 samples, 1.37%)</title><rect x="765.7" y="307.0" width="16.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="768.7" y="318.0"></text>
</g>
<g>
<title>kmem_cache_alloc (1 samples, 0.34%)</title><rect x="769.7" y="291.0" width="4.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="772.7" y="302.0"></text>
</g>
<g>
<title>should_failslab (1 samples, 0.34%)</title><rect x="773.8" y="291.0" width="4.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="776.8" y="302.0"></text>
</g>
<g>
<title>start_this_handle (1 samples, 0.34%)</title><rect x="777.8" y="291.0" width="4.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="780.8" y="302.0"></text>
</g>
<g>
<title>add_transaction_credits (1 samples, 0.34%)</title><rect x="777.8" y="275.0" width="4.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="780.8" y="286.0"></text>
</g>
<g>
<title>ext4_block_write_begin (1 samples, 0.34%)</title><rect x="781.8" y="323.0" width="4.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="784.8" y="334.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (3 samples, 1.03%)</title><rect x="785.9" y="323.0" width="12.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="788.9" y="334.0"></text>
</g>
<g>
<title>pagecache_get_page (3 samples, 1.03%)</title><rect x="785.9" y="307.0" width="12.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="788.9" y="318.0"></text>
</g>
<g>
<title>find_get_entry (3 samples, 1.03%)</title><rect x="785.9" y="291.0" width="12.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="788.9" y="302.0"></text>
</g>
<g>
<title>xas_load (1 samples, 0.34%)</title><rect x="794.0" y="275.0" width="4.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="797.0" y="286.0"></text>
</g>
<g>
<title>ext4_da_write_end (13 samples, 4.45%)</title><rect x="798.0" y="339.0" width="52.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="801.0" y="350.0">ext4_..</text>
</g>
<g>
<title>generic_write_end (12 samples, 4.11%)</title><rect x="802.1" y="323.0" width="48.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="805.1" y="334.0">gene..</text>
</g>
<g>
<title>__block_commit_write.isra.0 (1 samples, 0.34%)</title><rect x="802.1" y="307.0" width="4.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="805.1" y="318.0"></text>
</g>
<g>
<title>__mark_inode_dirty (11 samples, 3.77%)</title><rect x="806.1" y="307.0" width="44.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="809.1" y="318.0">__ma..</text>
</g>
<g>
<title>ext4_dirty_inode (11 samples, 3.77%)</title><rect x="806.1" y="291.0" width="44.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="809.1" y="302.0">ext4..</text>
</g>
<g>
<title>ext4_mark_inode_dirty (11 samples, 3.77%)</title><rect x="806.1" y="275.0" width="44.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="809.1" y="286.0">ext4..</text>
</g>
<g>
<title>ext4_mark_iloc_dirty (8 samples, 2.74%)</title><rect x="806.1" y="259.0" width="32.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="809.1" y="270.0">ex..</text>
</g>
<g>
<title>ext4_do_update_inode (8 samples, 2.74%)</title><rect x="806.1" y="243.0" width="32.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="809.1" y="254.0">ex..</text>
</g>
<g>
<title>__ext4_handle_dirty_metadata (1 samples, 0.34%)</title><rect x="810.1" y="227.0" width="4.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="813.1" y="238.0"></text>
</g>
<g>
<title>jbd2_journal_dirty_metadata (1 samples, 0.34%)</title><rect x="810.1" y="211.0" width="4.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="813.1" y="222.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (5 samples, 1.71%)</title><rect x="814.2" y="227.0" width="20.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="817.2" y="238.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.0 (5 samples, 1.71%)</title><rect x="814.2" y="211.0" width="20.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="817.2" y="222.0"></text>
</g>
<g>
<title>crypto_shash_update (3 samples, 1.03%)</title><rect x="822.3" y="195.0" width="12.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="825.3" y="206.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (3 samples, 1.03%)</title><rect x="822.3" y="179.0" width="12.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="825.3" y="190.0"></text>
</g>
<g>
<title>jbd2_journal_dirty_metadata (1 samples, 0.34%)</title><rect x="834.4" y="227.0" width="4.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="837.4" y="238.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (3 samples, 1.03%)</title><rect x="838.4" y="259.0" width="12.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="841.4" y="270.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (3 samples, 1.03%)</title><rect x="838.4" y="243.0" width="12.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="841.4" y="254.0"></text>
</g>
<g>
<title>ext4_get_group_desc (1 samples, 0.34%)</title><rect x="842.5" y="227.0" width="4.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="845.5" y="238.0"></text>
</g>
<g>
<title>ext4_inode_table (1 samples, 0.34%)</title><rect x="846.5" y="227.0" width="4.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="849.5" y="238.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (3 samples, 1.03%)</title><rect x="850.5" y="339.0" width="12.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="853.5" y="350.0"></text>
</g>
<g>
<title>copy_user_generic_string (3 samples, 1.03%)</title><rect x="850.5" y="323.0" width="12.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="853.5" y="334.0"></text>
</g>
<g>
<title>ext4_write_checks (1 samples, 0.34%)</title><rect x="862.7" y="371.0" width="4.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="865.7" y="382.0"></text>
</g>
<g>
<title>generic_write_check_limits.isra.0 (1 samples, 0.34%)</title><rect x="862.7" y="355.0" width="4.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="865.7" y="366.0"></text>
</g>
<g>
<title>fsnotify (1 samples, 0.34%)</title><rect x="866.7" y="419.0" width="4.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="869.7" y="430.0"></text>
</g>
<g>
<title>rw_verify_area (3 samples, 1.03%)</title><rect x="870.8" y="419.0" width="12.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="873.8" y="430.0"></text>
</g>
<g>
<title>apparmor_file_permission (1 samples, 0.34%)</title><rect x="870.8" y="403.0" width="4.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="873.8" y="414.0"></text>
</g>
<g>
<title>security_file_permission (2 samples, 0.68%)</title><rect x="874.8" y="403.0" width="8.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="877.8" y="414.0"></text>
</g>
<g>
<title>apparmor_file_permission (1 samples, 0.34%)</title><rect x="874.8" y="387.0" width="4.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="877.8" y="398.0"></text>
</g>
<g>
<title>common_file_perm (1 samples, 0.34%)</title><rect x="874.8" y="371.0" width="4.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="877.8" y="382.0"></text>
</g>
<g>
<title>common_file_perm (1 samples, 0.34%)</title><rect x="878.8" y="387.0" width="4.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="881.8" y="398.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (2 samples, 0.68%)</title><rect x="882.9" y="547.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="885.9" y="558.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.68%)</title><rect x="882.9" y="531.0" width="8.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="885.9" y="542.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (2 samples, 0.68%)</title><rect x="891.0" y="595.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="894.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::LockInternal() [clone .plt] (1 samples, 0.34%)</title><rect x="899.0" y="595.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="902.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::~Handler() [clone .plt] (1 samples, 0.34%)</title><rect x="903.1" y="595.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="906.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (32 samples, 10.96%)</title><rect x="907.1" y="595.0" width="129.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="910.1" y="606.0">rocksdb::WriteBa..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (32 samples, 10.96%)</title><rect x="907.1" y="579.0" width="129.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="910.1" y="590.0">rocksdb::WriteBa..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (32 samples, 10.96%)</title><rect x="907.1" y="563.0" width="129.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="910.1" y="574.0">rocksdb::WriteBa..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (28 samples, 9.59%)</title><rect x="915.2" y="547.0" width="113.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="918.2" y="558.0">rocksdb::MemTa..</text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.34%)</title><rect x="915.2" y="531.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="918.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (27 samples, 9.25%)</title><rect x="919.2" y="531.0" width="109.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="922.2" y="542.0">rocksdb::MemT..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.34%)</title><rect x="927.3" y="515.0" width="4.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="930.3" y="526.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.34%)</title><rect x="927.3" y="499.0" width="4.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="930.3" y="510.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.34%)</title><rect x="927.3" y="483.0" width="4.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="930.3" y="494.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.34%)</title><rect x="927.3" y="467.0" width="4.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="930.3" y="478.0"></text>
</g>
<g>
<title>do_user_addr_fault (1 samples, 0.34%)</title><rect x="927.3" y="451.0" width="4.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="930.3" y="462.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.34%)</title><rect x="927.3" y="435.0" width="4.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="930.3" y="446.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.34%)</title><rect x="927.3" y="419.0" width="4.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="930.3" y="430.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.34%)</title><rect x="931.4" y="515.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="934.4" y="526.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.34%)</title><rect x="935.4" y="515.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="938.4" y="526.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.34%)</title><rect x="935.4" y="499.0" width="4.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="938.4" y="510.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.34%)</title><rect x="935.4" y="483.0" width="4.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="938.4" y="494.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.34%)</title><rect x="935.4" y="467.0" width="4.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="938.4" y="478.0"></text>
</g>
<g>
<title>do_user_addr_fault (1 samples, 0.34%)</title><rect x="935.4" y="451.0" width="4.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="938.4" y="462.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.34%)</title><rect x="935.4" y="435.0" width="4.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="938.4" y="446.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.34%)</title><rect x="935.4" y="419.0" width="4.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="938.4" y="430.0"></text>
</g>
<g>
<title>do_anonymous_page (1 samples, 0.34%)</title><rect x="935.4" y="403.0" width="4.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="938.4" y="414.0"></text>
</g>
<g>
<title>alloc_pages_vma (1 samples, 0.34%)</title><rect x="935.4" y="387.0" width="4.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="938.4" y="398.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.34%)</title><rect x="935.4" y="371.0" width="4.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="938.4" y="382.0"></text>
</g>
<g>
<title>get_page_from_freelist (1 samples, 0.34%)</title><rect x="935.4" y="355.0" width="4.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="938.4" y="366.0"></text>
</g>
<g>
<title>rmqueue (1 samples, 0.34%)</title><rect x="935.4" y="339.0" width="4.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="938.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (22 samples, 7.53%)</title><rect x="939.5" y="515.0" width="88.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="942.5" y="526.0">rocksdb::M..</text>
</g>
<g>
<title>/tmp/librocksdbjni16518900048097374765.so (1 samples, 0.34%)</title><rect x="943.5" y="499.0" width="4.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="946.5" y="510.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (18 samples, 6.16%)</title><rect x="947.5" y="499.0" width="72.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="950.5" y="510.0">bool roc..</text>
</g>
<g>
<title>/tmp/librocksdbjni16518900048097374765.so (16 samples, 5.48%)</title><rect x="951.6" y="483.0" width="64.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="954.6" y="494.0">/tmp/li..</text>
</g>
<g>
<title>/tmp/librocksdbjni16518900048097374765.so (4 samples, 1.37%)</title><rect x="983.9" y="467.0" width="16.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="986.9" y="478.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni16518900048097374765.so (1 samples, 0.34%)</title><rect x="987.9" y="451.0" width="4.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="990.9" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.68%)</title><rect x="992.0" y="451.0" width="8.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="995.0" y="462.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.34%)</title><rect x="992.0" y="435.0" width="4.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="995.0" y="446.0"></text>
</g>
<g>
<title>memcmp@plt (1 samples, 0.34%)</title><rect x="996.0" y="435.0" width="4.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="999.0" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 1.37%)</title><rect x="1000.1" y="467.0" width="16.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1003.1" y="478.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.34%)</title><rect x="1004.1" y="451.0" width="4.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1007.1" y="462.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.34%)</title><rect x="1008.2" y="451.0" width="4.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1011.2" y="462.0"></text>
</g>
<g>
<title>memcmp@plt (1 samples, 0.34%)</title><rect x="1012.2" y="451.0" width="4.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1015.2" y="462.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.34%)</title><rect x="1016.2" y="483.0" width="4.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1019.2" y="494.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (1 samples, 0.34%)</title><rect x="1020.3" y="499.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1023.3" y="510.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() [clone .plt] (1 samples, 0.34%)</title><rect x="1024.3" y="499.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1027.3" y="510.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) [clone .plt] (1 samples, 0.34%)</title><rect x="1028.4" y="547.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1031.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (1 samples, 0.34%)</title><rect x="1032.4" y="547.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1035.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long) [clone .plt] (1 samples, 0.34%)</title><rect x="1036.4" y="595.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1039.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (1 samples, 0.34%)</title><rect x="1040.5" y="595.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1043.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.34%)</title><rect x="1040.5" y="579.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1043.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.34%)</title><rect x="1044.5" y="595.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1047.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteStatusCheck(rocksdb::Status const&amp;) (1 samples, 0.34%)</title><rect x="1048.6" y="611.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1051.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteStatusCheck(rocksdb::Status const&amp;) [clone .plt] (1 samples, 0.34%)</title><rect x="1052.6" y="611.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1055.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (1 samples, 0.34%)</title><rect x="1056.6" y="611.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1059.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (2 samples, 0.68%)</title><rect x="1060.7" y="611.0" width="8.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1063.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) [clone .plt] (1 samples, 0.34%)</title><rect x="1068.8" y="611.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1071.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) [clone .plt] (1 samples, 0.34%)</title><rect x="1072.8" y="611.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1075.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 1.03%)</title><rect x="1076.8" y="627.0" width="12.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1079.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.34%)</title><rect x="1076.8" y="611.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1079.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.34%)</title><rect x="1080.9" y="611.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1083.9" y="622.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (1 samples, 0.34%)</title><rect x="1080.9" y="595.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1083.9" y="606.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (1 samples, 0.34%)</title><rect x="1084.9" y="611.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1087.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (1 samples, 0.34%)</title><rect x="1089.0" y="627.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1092.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) [clone .plt] (1 samples, 0.34%)</title><rect x="1093.0" y="643.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1096.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) [clone .plt] (1 samples, 0.34%)</title><rect x="1097.1" y="643.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1100.1" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.68%)</title><rect x="1101.1" y="707.0" width="8.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1104.1" y="718.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.34%)</title><rect x="1101.1" y="691.0" width="4.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1104.1" y="702.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (1 samples, 0.34%)</title><rect x="1105.1" y="691.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.1" y="702.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (1 samples, 0.34%)</title><rect x="1105.1" y="675.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1108.1" y="686.0"></text>
</g>
<g>
<title>__libc_malloc (1 samples, 0.34%)</title><rect x="1109.2" y="707.0" width="4.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1112.2" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.byteBufferToBytes (1 samples, 0.34%)</title><rect x="1113.2" y="739.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1116.2" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.34%)</title><rect x="1113.2" y="723.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1116.2" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.34%)</title><rect x="1113.2" y="707.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1116.2" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.34%)</title><rect x="1113.2" y="691.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1116.2" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.34%)</title><rect x="1113.2" y="675.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1116.2" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.34%)</title><rect x="1113.2" y="659.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1116.2" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.34%)</title><rect x="1113.2" y="643.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1116.2" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.pack (1 samples, 0.34%)</title><rect x="1117.3" y="739.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1120.3" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.byteBufferToBytes (1 samples, 0.34%)</title><rect x="1117.3" y="723.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1120.3" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.34%)</title><rect x="1117.3" y="707.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1120.3" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.34%)</title><rect x="1117.3" y="691.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1120.3" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.34%)</title><rect x="1117.3" y="675.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1120.3" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.34%)</title><rect x="1117.3" y="659.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1120.3" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.34%)</title><rect x="1117.3" y="643.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1120.3" y="654.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.68%)</title><rect x="1121.3" y="787.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1124.3" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.68%)</title><rect x="1121.3" y="771.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1124.3" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.68%)</title><rect x="1121.3" y="755.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1124.3" y="766.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.68%)</title><rect x="1121.3" y="739.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1124.3" y="750.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.68%)</title><rect x="1121.3" y="723.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1124.3" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1 samples, 0.34%)</title><rect x="1125.3" y="707.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1128.3" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5 samples, 1.71%)</title><rect x="1129.4" y="819.0" width="20.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1132.4" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 1.37%)</title><rect x="1129.4" y="803.0" width="16.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1132.4" y="814.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.68%)</title><rect x="1129.4" y="787.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1132.4" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.68%)</title><rect x="1137.5" y="787.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1140.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.68%)</title><rect x="1137.5" y="771.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1140.5" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.68%)</title><rect x="1137.5" y="755.0" width="8.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1140.5" y="766.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="1141.5" y="739.0" width="4.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1144.5" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.34%)</title><rect x="1145.5" y="803.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1148.5" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.34%)</title><rect x="1145.5" y="787.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1148.5" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.34%)</title><rect x="1149.6" y="819.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1152.6" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.34%)</title><rect x="1149.6" y="803.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1152.6" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.34%)</title><rect x="1149.6" y="787.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1152.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.34%)</title><rect x="1149.6" y="771.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1152.6" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.34%)</title><rect x="1149.6" y="755.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1152.6" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (9 samples, 3.08%)</title><rect x="1153.6" y="835.0" width="36.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1156.6" y="846.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (9 samples, 3.08%)</title><rect x="1153.6" y="819.0" width="36.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1156.6" y="830.0">one..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (3 samples, 1.03%)</title><rect x="1153.6" y="803.0" width="12.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1156.6" y="814.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.34%)</title><rect x="1153.6" y="787.0" width="4.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1156.6" y="798.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.34%)</title><rect x="1157.7" y="787.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.7" y="798.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.34%)</title><rect x="1161.7" y="787.0" width="4.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1164.7" y="798.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.34%)</title><rect x="1161.7" y="771.0" width="4.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1164.7" y="782.0"></text>
</g>
<g>
<title>__recv (5 samples, 1.71%)</title><rect x="1165.8" y="803.0" width="20.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1168.8" y="814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 1.37%)</title><rect x="1169.8" y="787.0" width="16.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1172.8" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 1.37%)</title><rect x="1169.8" y="771.0" width="16.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1172.8" y="782.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (4 samples, 1.37%)</title><rect x="1169.8" y="755.0" width="16.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1172.8" y="766.0"></text>
</g>
<g>
<title>__sys_recvfrom (4 samples, 1.37%)</title><rect x="1169.8" y="739.0" width="16.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1172.8" y="750.0"></text>
</g>
<g>
<title>sock_recvmsg (3 samples, 1.03%)</title><rect x="1169.8" y="723.0" width="12.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1172.8" y="734.0"></text>
</g>
<g>
<title>inet6_recvmsg (3 samples, 1.03%)</title><rect x="1169.8" y="707.0" width="12.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1172.8" y="718.0"></text>
</g>
<g>
<title>tcp_recvmsg (3 samples, 1.03%)</title><rect x="1169.8" y="691.0" width="12.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1172.8" y="702.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (2 samples, 0.68%)</title><rect x="1173.8" y="675.0" width="8.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1176.8" y="686.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (2 samples, 0.68%)</title><rect x="1173.8" y="659.0" width="8.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1176.8" y="670.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.68%)</title><rect x="1173.8" y="643.0" width="8.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1176.8" y="654.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.34%)</title><rect x="1181.9" y="723.0" width="4.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1184.9" y="734.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.34%)</title><rect x="1181.9" y="707.0" width="4.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1184.9" y="718.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.34%)</title><rect x="1181.9" y="691.0" width="4.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1184.9" y="702.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.34%)</title><rect x="1181.9" y="675.0" width="4.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1184.9" y="686.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.34%)</title><rect x="1186.0" y="803.0" width="4.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1189.0" y="814.0"></text>
</g>
</g>
</svg>
