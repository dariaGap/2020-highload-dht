<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="373"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="373"> </text>
<g id="frames">
<g>
<title>all (916 samples, 100.00%)</title><rect x="10.0" y="339.0" width="1180.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="13.0" y="350.0">all</text>
</g>
<g>
<title>[Executor-0 tid=10478] (234 samples, 25.55%)</title><rect x="10.0" y="323.0" width="301.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="13.0" y="334.0">[Executor-0 tid=10478]</text>
</g>
<g>
<title>java/lang/Thread.run (234 samples, 25.55%)</title><rect x="10.0" y="307.0" width="301.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="318.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (234 samples, 25.55%)</title><rect x="10.0" y="291.0" width="301.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="302.0">java/util/concurrent/ThreadPoolExecutor$W..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (234 samples, 25.55%)</title><rect x="10.0" y="275.0" width="301.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="286.0">java/util/concurrent/ThreadPoolExecutor.r..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (232 samples, 25.33%)</title><rect x="10.0" y="259.0" width="298.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="270.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (232 samples, 25.33%)</title><rect x="10.0" y="243.0" width="298.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.0" y="254.0">java/util/concurrent/Executors$RunnableA..</text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/AsyncServiceImpl$$Lambda$68/246240756.run (232 samples, 25.33%)</title><rect x="10.0" y="227.0" width="298.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.0" y="238.0">ru/mail/polis/service/dariagap/AsyncServ..</text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/AsyncServiceImpl.lambda$get$1 (232 samples, 25.33%)</title><rect x="10.0" y="211.0" width="298.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="222.0">ru/mail/polis/service/dariagap/AsyncServ..</text>
</g>
<g>
<title>java/lang/String.getBytes (8 samples, 0.87%)</title><rect x="10.0" y="195.0" width="10.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (8 samples, 0.87%)</title><rect x="10.0" y="179.0" width="10.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (8 samples, 0.87%)</title><rect x="10.0" y="163.0" width="10.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.87%)</title><rect x="10.0" y="147.0" width="10.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>byte[] (8 samples, 0.87%)</title><rect x="10.0" y="131.0" width="10.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (12 samples, 1.31%)</title><rect x="20.3" y="195.0" width="15.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="23.3" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (12 samples, 1.31%)</title><rect x="20.3" y="179.0" width="15.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.3" y="190.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (12 samples, 1.31%)</title><rect x="20.3" y="163.0" width="15.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="23.3" y="174.0"></text>
</g>
<g>
<title>one.nio.http.Response (4 samples, 0.44%)</title><rect x="35.8" y="195.0" width="5.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="38.8" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (44 samples, 4.80%)</title><rect x="40.9" y="195.0" width="56.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="43.9" y="206.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (44 samples, 4.80%)</title><rect x="40.9" y="179.0" width="56.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="43.9" y="190.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (22 samples, 2.40%)</title><rect x="40.9" y="163.0" width="28.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="43.9" y="174.0">on..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (22 samples, 2.40%)</title><rect x="40.9" y="147.0" width="28.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="43.9" y="158.0">on..</text>
</g>
<g>
<title>byte[] (22 samples, 2.40%)</title><rect x="40.9" y="131.0" width="28.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="43.9" y="142.0">by..</text>
</g>
<g>
<title>one/nio/net/Session.write (22 samples, 2.40%)</title><rect x="69.3" y="163.0" width="28.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="72.3" y="174.0">on..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (22 samples, 2.40%)</title><rect x="69.3" y="147.0" width="28.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="72.3" y="158.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (26 samples, 2.84%)</title><rect x="97.6" y="195.0" width="33.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="100.6" y="206.0">on..</text>
</g>
<g>
<title>byte[] (9 samples, 0.98%)</title><rect x="97.6" y="179.0" width="11.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="100.6" y="190.0"></text>
</g>
<g>
<title>java.lang.String[] (10 samples, 1.09%)</title><rect x="109.2" y="179.0" width="12.9" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="112.2" y="190.0"></text>
</g>
<g>
<title>java.lang.String (7 samples, 0.76%)</title><rect x="122.1" y="179.0" width="9.0" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="125.1" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (117 samples, 12.77%)</title><rect x="131.1" y="195.0" width="150.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="134.1" y="206.0">ru/mail/polis/dao/D..</text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (17 samples, 1.86%)</title><rect x="131.1" y="179.0" width="21.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="134.1" y="190.0">r..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (17 samples, 1.86%)</title><rect x="131.1" y="163.0" width="21.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="134.1" y="174.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (17 samples, 1.86%)</title><rect x="131.1" y="147.0" width="21.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="134.1" y="158.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/dariagap/RecordIterator.next (52 samples, 5.68%)</title><rect x="153.0" y="179.0" width="67.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="156.0" y="190.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/dariagap/RecordIterator.next (52 samples, 5.68%)</title><rect x="153.0" y="163.0" width="67.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="156.0" y="174.0">ru/mail..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (16 samples, 1.75%)</title><rect x="153.0" y="147.0" width="20.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="156.0" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (16 samples, 1.75%)</title><rect x="153.0" y="131.0" width="20.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="156.0" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (16 samples, 1.75%)</title><rect x="153.0" y="115.0" width="20.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="156.0" y="126.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.key (12 samples, 1.31%)</title><rect x="173.6" y="147.0" width="15.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="176.6" y="158.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.key0 (12 samples, 1.31%)</title><rect x="173.6" y="131.0" width="15.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="176.6" y="142.0"></text>
</g>
<g>
<title>byte[] (12 samples, 1.31%)</title><rect x="173.6" y="115.0" width="15.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="176.6" y="126.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.value (9 samples, 0.98%)</title><rect x="189.1" y="147.0" width="11.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="192.1" y="158.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.value0 (9 samples, 0.98%)</title><rect x="189.1" y="131.0" width="11.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="192.1" y="142.0"></text>
</g>
<g>
<title>byte[] (9 samples, 0.98%)</title><rect x="189.1" y="115.0" width="11.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="192.1" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.unpack (15 samples, 1.64%)</title><rect x="200.7" y="147.0" width="19.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="203.7" y="158.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.33%)</title><rect x="200.7" y="131.0" width="3.8" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="203.7" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (12 samples, 1.31%)</title><rect x="204.5" y="131.0" width="15.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="207.5" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (12 samples, 1.31%)</title><rect x="204.5" y="115.0" width="15.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="207.5" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (12 samples, 1.31%)</title><rect x="204.5" y="99.0" width="15.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="207.5" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dariagap/RocksDBStorage.iterator (48 samples, 5.24%)</title><rect x="220.0" y="179.0" width="61.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="223.0" y="190.0">ru/mai..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.newIterator (29 samples, 3.17%)</title><rect x="220.0" y="163.0" width="37.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="223.0" y="174.0">org..</text>
</g>
<g>
<title>org.rocksdb.RocksIterator (9 samples, 0.98%)</title><rect x="220.0" y="147.0" width="11.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="223.0" y="158.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.&lt;init&gt; (20 samples, 2.18%)</title><rect x="231.6" y="147.0" width="25.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.6" y="158.0">o..</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.&lt;init&gt; (20 samples, 2.18%)</title><rect x="231.6" y="131.0" width="25.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.6" y="142.0">o..</text>
</g>
<g>
<title>org/rocksdb/RocksObject.&lt;init&gt; (20 samples, 2.18%)</title><rect x="231.6" y="115.0" width="25.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.6" y="126.0">o..</text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.&lt;init&gt; (20 samples, 2.18%)</title><rect x="231.6" y="99.0" width="25.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="234.6" y="110.0">o..</text>
</g>
<g>
<title>java.util.concurrent.atomic.AtomicBoolean (7 samples, 0.76%)</title><rect x="231.6" y="83.0" width="9.0" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="234.6" y="94.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractNativeReference.&lt;init&gt; (13 samples, 1.42%)</title><rect x="240.6" y="83.0" width="16.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="243.6" y="94.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (13 samples, 1.42%)</title><rect x="240.6" y="67.0" width="16.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="243.6" y="78.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer.register (13 samples, 1.42%)</title><rect x="240.6" y="51.0" width="16.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="243.6" y="62.0"></text>
</g>
<g>
<title>java.lang.ref.Finalizer (13 samples, 1.42%)</title><rect x="240.6" y="35.0" width="16.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="243.6" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.pack (19 samples, 2.07%)</title><rect x="257.3" y="163.0" width="24.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="260.3" y="174.0">r..</text>
</g>
<g>
<title>ru/mail/polis/util/Util.byteBufferToBytes (19 samples, 2.07%)</title><rect x="257.3" y="147.0" width="24.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="260.3" y="158.0">r..</text>
</g>
<g>
<title>byte[] (2 samples, 0.22%)</title><rect x="257.3" y="131.0" width="2.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="260.3" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (17 samples, 1.86%)</title><rect x="259.9" y="131.0" width="21.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="262.9" y="142.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (17 samples, 1.86%)</title><rect x="259.9" y="115.0" width="21.9" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="262.9" y="126.0">j..</text>
</g>
<g>
<title>ru/mail/polis/util/Util.byteBufferToBytes (21 samples, 2.29%)</title><rect x="281.8" y="195.0" width="27.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.8" y="206.0">r..</text>
</g>
<g>
<title>byte[] (7 samples, 0.76%)</title><rect x="281.8" y="179.0" width="9.0" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="284.8" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (14 samples, 1.53%)</title><rect x="290.8" y="179.0" width="18.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="293.8" y="190.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (14 samples, 1.53%)</title><rect x="290.8" y="163.0" width="18.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="293.8" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (2 samples, 0.22%)</title><rect x="308.9" y="259.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="311.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (2 samples, 0.22%)</title><rect x="308.9" y="243.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="311.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.11%)</title><rect x="308.9" y="227.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="311.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.11%)</title><rect x="308.9" y="211.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="311.9" y="222.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (1 samples, 0.11%)</title><rect x="308.9" y="195.0" width="1.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="311.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.11%)</title><rect x="310.2" y="227.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="313.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.11%)</title><rect x="310.2" y="211.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="313.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.11%)</title><rect x="310.2" y="195.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="313.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.11%)</title><rect x="310.2" y="179.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="313.2" y="190.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (1 samples, 0.11%)</title><rect x="310.2" y="163.0" width="1.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="313.2" y="174.0"></text>
</g>
<g>
<title>[Executor-1 tid=10479] (221 samples, 24.13%)</title><rect x="311.4" y="323.0" width="284.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="314.4" y="334.0">[Executor-1 tid=10479]</text>
</g>
<g>
<title>java/lang/Thread.run (221 samples, 24.13%)</title><rect x="311.4" y="307.0" width="284.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="314.4" y="318.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (221 samples, 24.13%)</title><rect x="311.4" y="291.0" width="284.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.4" y="302.0">java/util/concurrent/ThreadPoolExecuto..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (221 samples, 24.13%)</title><rect x="311.4" y="275.0" width="284.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="314.4" y="286.0">java/util/concurrent/ThreadPoolExecuto..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (220 samples, 24.02%)</title><rect x="311.4" y="259.0" width="283.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="314.4" y="270.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (220 samples, 24.02%)</title><rect x="311.4" y="243.0" width="283.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="314.4" y="254.0">java/util/concurrent/Executors$Runnabl..</text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/AsyncServiceImpl$$Lambda$68/246240756.run (220 samples, 24.02%)</title><rect x="311.4" y="227.0" width="283.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="314.4" y="238.0">ru/mail/polis/service/dariagap/AsyncSe..</text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/AsyncServiceImpl.lambda$get$1 (220 samples, 24.02%)</title><rect x="311.4" y="211.0" width="283.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="314.4" y="222.0">ru/mail/polis/service/dariagap/AsyncSe..</text>
</g>
<g>
<title>java/lang/String.getBytes (10 samples, 1.09%)</title><rect x="311.4" y="195.0" width="12.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="314.4" y="206.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (10 samples, 1.09%)</title><rect x="311.4" y="179.0" width="12.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="314.4" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (10 samples, 1.09%)</title><rect x="311.4" y="163.0" width="12.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="314.4" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 1.09%)</title><rect x="311.4" y="147.0" width="12.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="314.4" y="158.0"></text>
</g>
<g>
<title>byte[] (10 samples, 1.09%)</title><rect x="311.4" y="131.0" width="12.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="314.4" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (9 samples, 0.98%)</title><rect x="324.3" y="195.0" width="11.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="327.3" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (9 samples, 0.98%)</title><rect x="324.3" y="179.0" width="11.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="327.3" y="190.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (9 samples, 0.98%)</title><rect x="324.3" y="163.0" width="11.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="327.3" y="174.0"></text>
</g>
<g>
<title>one.nio.http.Response (6 samples, 0.66%)</title><rect x="335.9" y="195.0" width="7.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="338.9" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (33 samples, 3.60%)</title><rect x="343.6" y="195.0" width="42.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="346.6" y="206.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (33 samples, 3.60%)</title><rect x="343.6" y="179.0" width="42.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="346.6" y="190.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (26 samples, 2.84%)</title><rect x="343.6" y="163.0" width="33.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="346.6" y="174.0">on..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (26 samples, 2.84%)</title><rect x="343.6" y="147.0" width="33.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="346.6" y="158.0">on..</text>
</g>
<g>
<title>byte[] (26 samples, 2.84%)</title><rect x="343.6" y="131.0" width="33.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="346.6" y="142.0">by..</text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.76%)</title><rect x="377.1" y="163.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="380.1" y="174.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (7 samples, 0.76%)</title><rect x="377.1" y="147.0" width="9.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="380.1" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (22 samples, 2.40%)</title><rect x="386.2" y="195.0" width="28.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="389.2" y="206.0">on..</text>
</g>
<g>
<title>byte[] (6 samples, 0.66%)</title><rect x="386.2" y="179.0" width="7.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="389.2" y="190.0"></text>
</g>
<g>
<title>java.lang.String[] (10 samples, 1.09%)</title><rect x="393.9" y="179.0" width="12.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="396.9" y="190.0"></text>
</g>
<g>
<title>java.lang.String (6 samples, 0.66%)</title><rect x="406.8" y="179.0" width="7.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="409.8" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (112 samples, 12.23%)</title><rect x="414.5" y="195.0" width="144.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="417.5" y="206.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (12 samples, 1.31%)</title><rect x="414.5" y="179.0" width="15.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="417.5" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (12 samples, 1.31%)</title><rect x="414.5" y="163.0" width="15.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="417.5" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (12 samples, 1.31%)</title><rect x="414.5" y="147.0" width="15.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="417.5" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dariagap/RecordIterator.next (60 samples, 6.55%)</title><rect x="430.0" y="179.0" width="77.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="433.0" y="190.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/dariagap/RecordIterator.next (60 samples, 6.55%)</title><rect x="430.0" y="163.0" width="77.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="433.0" y="174.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (18 samples, 1.97%)</title><rect x="430.0" y="147.0" width="23.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="433.0" y="158.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (18 samples, 1.97%)</title><rect x="430.0" y="131.0" width="23.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="433.0" y="142.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (18 samples, 1.97%)</title><rect x="430.0" y="115.0" width="23.1" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="433.0" y="126.0">j..</text>
</g>
<g>
<title>org/rocksdb/RocksIterator.key (11 samples, 1.20%)</title><rect x="453.1" y="147.0" width="14.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="456.1" y="158.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.key0 (11 samples, 1.20%)</title><rect x="453.1" y="131.0" width="14.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="456.1" y="142.0"></text>
</g>
<g>
<title>byte[] (11 samples, 1.20%)</title><rect x="453.1" y="115.0" width="14.2" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="456.1" y="126.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.value (9 samples, 0.98%)</title><rect x="467.3" y="147.0" width="11.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="470.3" y="158.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.value0 (9 samples, 0.98%)</title><rect x="467.3" y="131.0" width="11.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="470.3" y="142.0"></text>
</g>
<g>
<title>byte[] (9 samples, 0.98%)</title><rect x="467.3" y="115.0" width="11.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="470.3" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.unpack (22 samples, 2.40%)</title><rect x="478.9" y="147.0" width="28.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="481.9" y="158.0">ru..</text>
</g>
<g>
<title>byte[] (7 samples, 0.76%)</title><rect x="478.9" y="131.0" width="9.0" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="481.9" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (15 samples, 1.64%)</title><rect x="487.9" y="131.0" width="19.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="490.9" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (15 samples, 1.64%)</title><rect x="487.9" y="115.0" width="19.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="490.9" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (15 samples, 1.64%)</title><rect x="487.9" y="99.0" width="19.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="490.9" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dariagap/RocksDBStorage.iterator (40 samples, 4.37%)</title><rect x="507.2" y="179.0" width="51.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="510.2" y="190.0">ru/ma..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.newIterator (25 samples, 2.73%)</title><rect x="507.2" y="163.0" width="32.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="510.2" y="174.0">or..</text>
</g>
<g>
<title>org.rocksdb.RocksIterator (12 samples, 1.31%)</title><rect x="507.2" y="147.0" width="15.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="510.2" y="158.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.&lt;init&gt; (13 samples, 1.42%)</title><rect x="522.7" y="147.0" width="16.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="525.7" y="158.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.&lt;init&gt; (13 samples, 1.42%)</title><rect x="522.7" y="131.0" width="16.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="525.7" y="142.0"></text>
</g>
<g>
<title>org/rocksdb/RocksObject.&lt;init&gt; (13 samples, 1.42%)</title><rect x="522.7" y="115.0" width="16.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="525.7" y="126.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.&lt;init&gt; (13 samples, 1.42%)</title><rect x="522.7" y="99.0" width="16.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="525.7" y="110.0"></text>
</g>
<g>
<title>java.util.concurrent.atomic.AtomicBoolean (3 samples, 0.33%)</title><rect x="522.7" y="83.0" width="3.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="525.7" y="94.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractNativeReference.&lt;init&gt; (10 samples, 1.09%)</title><rect x="526.6" y="83.0" width="12.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="529.6" y="94.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (10 samples, 1.09%)</title><rect x="526.6" y="67.0" width="12.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="529.6" y="78.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer.register (10 samples, 1.09%)</title><rect x="526.6" y="51.0" width="12.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="529.6" y="62.0"></text>
</g>
<g>
<title>java.lang.ref.Finalizer (10 samples, 1.09%)</title><rect x="526.6" y="35.0" width="12.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="529.6" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.pack (15 samples, 1.64%)</title><rect x="539.5" y="163.0" width="19.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="542.5" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.byteBufferToBytes (15 samples, 1.64%)</title><rect x="539.5" y="147.0" width="19.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="542.5" y="158.0"></text>
</g>
<g>
<title>byte[] (5 samples, 0.55%)</title><rect x="539.5" y="131.0" width="6.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="542.5" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (10 samples, 1.09%)</title><rect x="545.9" y="131.0" width="12.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="548.9" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (10 samples, 1.09%)</title><rect x="545.9" y="115.0" width="12.9" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="548.9" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.byteBufferToBytes (28 samples, 3.06%)</title><rect x="558.8" y="195.0" width="36.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="561.8" y="206.0">ru/..</text>
</g>
<g>
<title>byte[] (8 samples, 0.87%)</title><rect x="558.8" y="179.0" width="10.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="561.8" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (20 samples, 2.18%)</title><rect x="569.1" y="179.0" width="25.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="572.1" y="190.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (20 samples, 2.18%)</title><rect x="569.1" y="163.0" width="25.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="572.1" y="174.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.11%)</title><rect x="594.8" y="259.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="597.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (1 samples, 0.11%)</title><rect x="594.8" y="243.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="597.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.11%)</title><rect x="594.8" y="227.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="597.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.11%)</title><rect x="594.8" y="211.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="597.8" y="222.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (1 samples, 0.11%)</title><rect x="594.8" y="195.0" width="1.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="597.8" y="206.0"></text>
</g>
<g>
<title>[NIO Selector #0 tid=10468] (237 samples, 25.87%)</title><rect x="596.1" y="323.0" width="305.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="599.1" y="334.0">[NIO Selector #0 tid=10468]</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (237 samples, 25.87%)</title><rect x="596.1" y="307.0" width="305.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="599.1" y="318.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (5 samples, 0.55%)</title><rect x="596.1" y="291.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="599.1" y="302.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (5 samples, 0.55%)</title><rect x="596.1" y="275.0" width="6.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="599.1" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (232 samples, 25.33%)</title><rect x="602.6" y="291.0" width="298.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="605.6" y="302.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (232 samples, 25.33%)</title><rect x="602.6" y="275.0" width="298.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="605.6" y="286.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (232 samples, 25.33%)</title><rect x="602.6" y="259.0" width="298.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="605.6" y="270.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (82 samples, 8.95%)</title><rect x="602.6" y="243.0" width="105.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="605.6" y="254.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (82 samples, 8.95%)</title><rect x="602.6" y="227.0" width="105.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="605.6" y="238.0">one/nio/http/..</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (52 samples, 5.68%)</title><rect x="602.6" y="211.0" width="67.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="605.6" y="222.0">Request..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (18 samples, 1.97%)</title><rect x="602.6" y="195.0" width="23.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="605.6" y="206.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (18 samples, 1.97%)</title><rect x="602.6" y="179.0" width="23.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="605.6" y="190.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (18 samples, 1.97%)</title><rect x="602.6" y="163.0" width="23.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="605.6" y="174.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (18 samples, 1.97%)</title><rect x="602.6" y="147.0" width="23.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="605.6" y="158.0">j..</text>
</g>
<g>
<title>java.lang.String (8 samples, 0.87%)</title><rect x="602.6" y="131.0" width="10.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="605.6" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (10 samples, 1.09%)</title><rect x="612.9" y="131.0" width="12.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="615.9" y="142.0"></text>
</g>
<g>
<title>byte[] (10 samples, 1.09%)</title><rect x="612.9" y="115.0" width="12.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="615.9" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/AsyncServiceImpl.get (34 samples, 3.71%)</title><rect x="625.8" y="195.0" width="43.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="628.8" y="206.0">ru/m..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (9 samples, 0.98%)</title><rect x="625.8" y="179.0" width="11.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="628.8" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (9 samples, 0.98%)</title><rect x="625.8" y="163.0" width="11.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="628.8" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/AsyncServiceImpl$$Lambda$68/246240756.get$Lambda (9 samples, 0.98%)</title><rect x="625.8" y="147.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="628.8" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.service.dariagap.AsyncServiceImpl$$Lambda$68 (9 samples, 0.98%)</title><rect x="625.8" y="131.0" width="11.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="628.8" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (25 samples, 2.73%)</title><rect x="637.4" y="179.0" width="32.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="640.4" y="190.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.newTaskFor (25 samples, 2.73%)</title><rect x="637.4" y="163.0" width="32.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="640.4" y="174.0">ja..</text>
</g>
<g>
<title>java.util.concurrent.FutureTask (17 samples, 1.86%)</title><rect x="637.4" y="147.0" width="21.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="640.4" y="158.0">j..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.&lt;init&gt; (8 samples, 0.87%)</title><rect x="659.3" y="147.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="662.3" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors.callable (8 samples, 0.87%)</title><rect x="659.3" y="131.0" width="10.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="662.3" y="142.0"></text>
</g>
<g>
<title>java.util.concurrent.Executors$RunnableAdapter (8 samples, 0.87%)</title><rect x="659.3" y="115.0" width="10.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="662.3" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (30 samples, 3.28%)</title><rect x="669.6" y="211.0" width="38.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="672.6" y="222.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (30 samples, 3.28%)</title><rect x="669.6" y="195.0" width="38.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="672.6" y="206.0">jav..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (30 samples, 3.28%)</title><rect x="669.6" y="179.0" width="38.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="672.6" y="190.0">jav..</text>
</g>
<g>
<title>java.lang.String (11 samples, 1.20%)</title><rect x="669.6" y="163.0" width="14.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="672.6" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (19 samples, 2.07%)</title><rect x="683.7" y="163.0" width="24.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="686.7" y="174.0">j..</text>
</g>
<g>
<title>byte[] (19 samples, 2.07%)</title><rect x="683.7" y="147.0" width="24.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="686.7" y="158.0">b..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (94 samples, 10.26%)</title><rect x="708.2" y="243.0" width="121.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="711.2" y="254.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one.nio.http.Request (16 samples, 1.75%)</title><rect x="708.2" y="227.0" width="20.6" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="711.2" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (34 samples, 3.71%)</title><rect x="728.8" y="227.0" width="43.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="731.8" y="238.0">one/..</text>
</g>
<g>
<title>java.lang.String[] (34 samples, 3.71%)</title><rect x="728.8" y="211.0" width="43.8" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="731.8" y="222.0">java..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (44 samples, 4.80%)</title><rect x="772.6" y="227.0" width="56.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="775.6" y="238.0">one/ni..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (44 samples, 4.80%)</title><rect x="772.6" y="211.0" width="56.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="775.6" y="222.0">one/ni..</text>
</g>
<g>
<title>char[] (17 samples, 1.86%)</title><rect x="772.6" y="195.0" width="21.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="775.6" y="206.0">c..</text>
</g>
<g>
<title>java.lang.String (9 samples, 0.98%)</title><rect x="794.5" y="195.0" width="11.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="797.5" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (18 samples, 1.97%)</title><rect x="806.1" y="195.0" width="23.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="809.1" y="206.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (18 samples, 1.97%)</title><rect x="806.1" y="179.0" width="23.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="809.1" y="190.0">j..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (18 samples, 1.97%)</title><rect x="806.1" y="163.0" width="23.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="809.1" y="174.0">j..</text>
</g>
<g>
<title>byte[] (18 samples, 1.97%)</title><rect x="806.1" y="147.0" width="23.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="809.1" y="158.0">b..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (56 samples, 6.11%)</title><rect x="829.3" y="243.0" width="72.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="832.3" y="254.0">one/nio/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (56 samples, 6.11%)</title><rect x="829.3" y="227.0" width="72.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="832.3" y="238.0">one/nio/..</text>
</g>
<g>
<title>char[] (25 samples, 2.73%)</title><rect x="829.3" y="211.0" width="32.2" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="832.3" y="222.0">ch..</text>
</g>
<g>
<title>java.lang.String (13 samples, 1.42%)</title><rect x="861.5" y="211.0" width="16.8" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="864.5" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (18 samples, 1.97%)</title><rect x="878.3" y="211.0" width="23.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="881.3" y="222.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (18 samples, 1.97%)</title><rect x="878.3" y="195.0" width="23.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="881.3" y="206.0">j..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (18 samples, 1.97%)</title><rect x="878.3" y="179.0" width="23.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="881.3" y="190.0">j..</text>
</g>
<g>
<title>byte[] (18 samples, 1.97%)</title><rect x="878.3" y="163.0" width="23.1" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="881.3" y="174.0">b..</text>
</g>
<g>
<title>[NIO Selector #1 tid=10469] (224 samples, 24.45%)</title><rect x="901.4" y="323.0" width="288.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="904.4" y="334.0">[NIO Selector #1 tid=10469]</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (224 samples, 24.45%)</title><rect x="901.4" y="307.0" width="288.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="904.4" y="318.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/Session.process (224 samples, 24.45%)</title><rect x="901.4" y="291.0" width="288.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="904.4" y="302.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (224 samples, 24.45%)</title><rect x="901.4" y="275.0" width="288.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="904.4" y="286.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (224 samples, 24.45%)</title><rect x="901.4" y="259.0" width="288.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="904.4" y="270.0">one/nio/http/HttpSession.processHttpBuf..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (75 samples, 8.19%)</title><rect x="901.4" y="243.0" width="96.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="904.4" y="254.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (75 samples, 8.19%)</title><rect x="901.4" y="227.0" width="96.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="904.4" y="238.0">one/nio/htt..</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (49 samples, 5.35%)</title><rect x="901.4" y="211.0" width="63.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="904.4" y="222.0">Request..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (20 samples, 2.18%)</title><rect x="901.4" y="195.0" width="25.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="904.4" y="206.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (20 samples, 2.18%)</title><rect x="901.4" y="179.0" width="25.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="904.4" y="190.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (20 samples, 2.18%)</title><rect x="901.4" y="163.0" width="25.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="904.4" y="174.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (20 samples, 2.18%)</title><rect x="901.4" y="147.0" width="25.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="904.4" y="158.0">j..</text>
</g>
<g>
<title>java.lang.String (11 samples, 1.20%)</title><rect x="901.4" y="131.0" width="14.2" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="904.4" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (9 samples, 0.98%)</title><rect x="915.6" y="131.0" width="11.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="918.6" y="142.0"></text>
</g>
<g>
<title>byte[] (9 samples, 0.98%)</title><rect x="915.6" y="115.0" width="11.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="918.6" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/AsyncServiceImpl.get (29 samples, 3.17%)</title><rect x="927.2" y="195.0" width="37.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="930.2" y="206.0">ru/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (10 samples, 1.09%)</title><rect x="927.2" y="179.0" width="12.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="930.2" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (10 samples, 1.09%)</title><rect x="927.2" y="163.0" width="12.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="930.2" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dariagap/AsyncServiceImpl$$Lambda$68/246240756.get$Lambda (10 samples, 1.09%)</title><rect x="927.2" y="147.0" width="12.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="930.2" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.service.dariagap.AsyncServiceImpl$$Lambda$68 (10 samples, 1.09%)</title><rect x="927.2" y="131.0" width="12.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="930.2" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (19 samples, 2.07%)</title><rect x="940.1" y="179.0" width="24.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="943.1" y="190.0">j..</text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.newTaskFor (19 samples, 2.07%)</title><rect x="940.1" y="163.0" width="24.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="943.1" y="174.0">j..</text>
</g>
<g>
<title>java.util.concurrent.FutureTask (11 samples, 1.20%)</title><rect x="940.1" y="147.0" width="14.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="943.1" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.&lt;init&gt; (8 samples, 0.87%)</title><rect x="954.3" y="147.0" width="10.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="957.3" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors.callable (8 samples, 0.87%)</title><rect x="954.3" y="131.0" width="10.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="957.3" y="142.0"></text>
</g>
<g>
<title>java.util.concurrent.Executors$RunnableAdapter (8 samples, 0.87%)</title><rect x="954.3" y="115.0" width="10.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="957.3" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (26 samples, 2.84%)</title><rect x="964.6" y="211.0" width="33.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="967.6" y="222.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (26 samples, 2.84%)</title><rect x="964.6" y="195.0" width="33.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="967.6" y="206.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (26 samples, 2.84%)</title><rect x="964.6" y="179.0" width="33.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="967.6" y="190.0">ja..</text>
</g>
<g>
<title>java.lang.String (14 samples, 1.53%)</title><rect x="964.6" y="163.0" width="18.0" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="967.6" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (12 samples, 1.31%)</title><rect x="982.6" y="163.0" width="15.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="985.6" y="174.0"></text>
</g>
<g>
<title>byte[] (12 samples, 1.31%)</title><rect x="982.6" y="147.0" width="15.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="985.6" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (108 samples, 11.79%)</title><rect x="998.1" y="243.0" width="139.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1001.1" y="254.0">one/nio/http/Http..</text>
</g>
<g>
<title>one.nio.http.Request (14 samples, 1.53%)</title><rect x="998.1" y="227.0" width="18.0" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1001.1" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (40 samples, 4.37%)</title><rect x="1016.1" y="227.0" width="51.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1019.1" y="238.0">one/n..</text>
</g>
<g>
<title>java.lang.String[] (40 samples, 4.37%)</title><rect x="1016.1" y="211.0" width="51.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1019.1" y="222.0">java...</text>
</g>
<g>
<title>one/nio/util/Utf8.read (54 samples, 5.90%)</title><rect x="1067.6" y="227.0" width="69.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1070.6" y="238.0">one/nio..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (54 samples, 5.90%)</title><rect x="1067.6" y="211.0" width="69.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1070.6" y="222.0">one/nio..</text>
</g>
<g>
<title>char[] (25 samples, 2.73%)</title><rect x="1067.6" y="195.0" width="32.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1070.6" y="206.0">ch..</text>
</g>
<g>
<title>java.lang.String (13 samples, 1.42%)</title><rect x="1099.8" y="195.0" width="16.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1102.8" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (16 samples, 1.75%)</title><rect x="1116.6" y="195.0" width="20.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1119.6" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (16 samples, 1.75%)</title><rect x="1116.6" y="179.0" width="20.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1119.6" y="190.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (16 samples, 1.75%)</title><rect x="1116.6" y="163.0" width="20.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1119.6" y="174.0"></text>
</g>
<g>
<title>byte[] (16 samples, 1.75%)</title><rect x="1116.6" y="147.0" width="20.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1119.6" y="158.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (41 samples, 4.48%)</title><rect x="1137.2" y="243.0" width="52.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1140.2" y="254.0">one/n..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (41 samples, 4.48%)</title><rect x="1137.2" y="227.0" width="52.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1140.2" y="238.0">one/n..</text>
</g>
<g>
<title>char[] (18 samples, 1.97%)</title><rect x="1137.2" y="211.0" width="23.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1140.2" y="222.0">c..</text>
</g>
<g>
<title>java.lang.String (8 samples, 0.87%)</title><rect x="1160.4" y="211.0" width="10.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1163.4" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (15 samples, 1.64%)</title><rect x="1170.7" y="211.0" width="19.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1173.7" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (15 samples, 1.64%)</title><rect x="1170.7" y="195.0" width="19.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1173.7" y="206.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (15 samples, 1.64%)</title><rect x="1170.7" y="179.0" width="19.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1173.7" y="190.0"></text>
</g>
<g>
<title>byte[] (15 samples, 1.64%)</title><rect x="1170.7" y="163.0" width="19.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1173.7" y="174.0"></text>
</g>
</g>
</svg>
